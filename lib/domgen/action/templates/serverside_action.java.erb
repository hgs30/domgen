/* DO NOT EDIT: File is auto-generated */
package <%= to_package(method.action.qualified_serverside_action_name) %>;

<% unless method.action.serverside_action_module_local? %>public <% end %>final class <%= method.action.serverside_action_name %>
{
  private <%= method.action.serverside_action_name %>()
  {
  }

  @javax.annotation.Nonnull
  <% unless method.action.serverside_action_module_local? %>public <% end %>static String actionTypeCode()
  {
    return <%= method.service.action.service_actions_name %>.<%= method.name %>ActionInterceptor.actionTypeCode();
  }

  @java.lang.SuppressWarnings( { "unchecked", "RedundantSuppression", "DuplicatedCode" } )
  @javax.annotation.Nonnull
  <% unless method.action.serverside_action_module_local? %>public <% end %>static String encode( <%= method.parameters.collect{|p| "#{annotated_type(p, :ejb)} #{Reality::Naming.camelize(p.name)}" }.join(', ')%> )
  {
    final var builder = javax.json.Json.createObjectBuilder();
      <%- method.parameters.each do |parameter|
conversion_rule =
  case
when (parameter.enumeration? && parameter.collection? && parameter.enumeration.numeric_values?) then Proc.new {|value| "javax.json.Json.createArrayBuilder( #{value}.stream().map(Enum::ordinal).toList() ).build()"}
when (parameter.enumeration? && parameter.enumeration.numeric_values?) then Proc.new {|value| "javax.json.Json.createValue( #{value}.ordinal() )"}
when (parameter.enumeration? && parameter.collection? && parameter.enumeration.textual_values?) then Proc.new {|value| "javax.json.Json.createArrayBuilder( #{value}.stream().map(Enum::name).toList() ).build()"}
when (parameter.enumeration? && parameter.enumeration.textual_values?) then Proc.new {|value| "javax.json.Json.createValue( #{value}.name() )"}
when parameter.struct? then Proc.new {|value| "#{parameter.referenced_struct.action.qualified_json_encoder_name}.encode( #{value} )"}
when (parameter.date? && parameter.collection?) then Proc.new {|value| "javax.json.Json.createArrayBuilder( #{value}.stream().map( iris.rose.server.service.util.RDate::fromDate ).toList() ).build()"}
when parameter.date? then Proc.new {|value| "javax.json.Json.createValue( iris.rose.server.service.util.RDate.fromDate( #{value} ).toString() )"}
when (parameter.datetime? && parameter.collection?) then Proc.new {|value| "javax.json.Json.createArrayBuilder( #{value}.stream().map( java.util.Date::getTime ).toList() ).build()"}
when parameter.datetime? then Proc.new {|value| "javax.json.Json.createValue( (#{value}).getTime() )"}
when (parameter.reference? && parameter.collection?) then Proc.new {|value| "javax.json.Json.createArrayBuilder( #{value}.stream().map( r -> r.getId() ).toList() ).build()"}
when parameter.reference? then Proc.new {|value| "#{value}.getId()"}
when parameter.collection? then Proc.new {|value| "javax.json.Json.createArrayBuilder( #{value} ).build()"}
  else Proc.new{|value| "#{value}" }
end -%><%- if parameter.nullable?%>
    if ( null != <%= Reality::Naming.camelize(parameter.name) %> )
    {
      builder.add( "<%= parameter.name %>", <%= conversion_rule.call( Reality::Naming.camelize(parameter.name), parameter.ejb.non_primitive_java_type(:boundary) ) %> );
    }<%- else %>
    builder.add( "<%= parameter.name %>", <%= conversion_rule.call( Reality::Naming.camelize(parameter.name), parameter.ejb.non_primitive_java_type(:boundary) ) %> );<%- end %><%- end -%>
  return builder.build().toString();
  }
}
