/* DO NOT EDIT: File is auto-generated */
package <%= to_package(entity.arez.qualified_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "unchecked", "JavaDoc", "Arez:UnmanagedComponentReference", "Arez:UnnecessaryDefault", "RedundantSuppression" } )
<% unless entity.abstract? -%>
<% has_arez_elements = !entity.arez.referencing_client_side_attributes.empty? || entity.attributes.any?{|a|a.arez? && (!a.immutable? || a.reference?) } -%>
<%
  annotation_parameters = []
  annotation_parameters << "name = \"#{entity.data_module.name}_#{entity.name}\""
  annotation_parameters << "observable = arez.annotations.Feature.ENABLE"
  annotation_parameters << "requireEquals = arez.annotations.Feature.ENABLE"
  unless has_arez_elements
    annotation_parameters << 'allowEmpty = true'
  end
  if entity.arez.access_entities_outside_transaction?
    annotation_parameters << 'defaultReadOutsideTransaction = arez.annotations.Feature.ENABLE'
    annotation_parameters << 'defaultWriteOutsideTransaction = arez.annotations.Feature.ENABLE'
  end
  -%>
@arez.annotations.ArezComponent( <%= annotation_parameters.join(', ') %> )
<% end -%>
<%= entity.arez.module_local? ? '' : 'public ' %>abstract class <%= entity.arez.name %>
<%= entity.extends ? "  extends #{entity.data_module.entity_by_name(entity.extends).arez.qualified_name}\n" : '' -%>
<% if entity.arez.extensions.size > 0 -%>
  implements <%= entity.arez.extensions.join(", ") %>
<% end -%>
{
<% entity.declared_attributes.select { |a| !a.abstract? && a.arez? && a.text? && a.has_non_default_max_length? }.each do |attribute| -%>
  <%= entity.arez.module_local? ? '' : 'public ' %>static final int <%= Reality::Naming.uppercase_constantize(attribute.name) -%>_MAX_SIZE = <%= attribute.length -%>;
<% end -%>
<% entity.declared_attributes.select{ |attribute| attribute.immutable? && !attribute.abstract? && attribute.arez? }.each do |attribute|
  if attribute.reference? -%>
  <%= annotated_type(attribute, :arez, :transport, :assume_generated => true, :private => true, :final => !attribute.updatable?) %> _<%= Reality::Naming.camelize(attribute.arez.name(:transport)) %>;
<% else -%>
  <%= annotated_type(attribute, :arez, :default, :assume_generated => true, :private => true, :final => !attribute.updatable?) %> _<%= Reality::Naming.camelize(attribute.arez.name) %>;
<%
   end
   end
-%>

  <%= entity.subtypes.empty? ? '' : 'protected ' %><%= entity.arez.name %>( <%= entity.attributes.select{|attribute| attribute.immutable? && !attribute.abstract? && attribute.arez?}.collect { |attribute| "#{annotated_type(attribute, :arez, attribute.reference? ? :transport : :default, :final => true, :assume_generated => true)} #{Reality::Naming.camelize(attribute.arez.name(attribute.reference? ? :transport : :default))}"}.join(', ') %> )
  {
<% if entity.extends -%>
    super( <%= entity.data_module.entity_by_name(entity.extends).attributes.select{|attribute| attribute.immutable? && !attribute.abstract? && attribute.arez?}.collect {|attribute| Reality::Naming.camelize(attribute.arez.name(attribute.reference? ? :transport : :default))}.join(', ') %> );
<% end -%>
<% entity.declared_attributes.select{|attribute| attribute.immutable? && !attribute.abstract? && attribute.arez?}.each do |attribute| -%>
    _<%= Reality::Naming.camelize(attribute.arez.name(:transport)) %> = <%= supports_nullable?(attribute.arez, attribute.reference? ? :transport : :default, :assume_generated => true) && !attribute.nullable? ? "java.util.Objects.requireNonNull( #{Reality::Naming.camelize(attribute.arez.name(attribute.reference? ? :transport : :default))} )" : Reality::Naming.camelize(attribute.arez.name(attribute.reference? ? :transport : :default)) %>;
<% end -%>
  }
<% entity.declared_attributes.select{|attribute| attribute.arez? && !attribute.abstract? }.each do |attribute| -%>
<% if attribute.reference? -%>
<% if attribute.immutable? -%>

  @arez.annotations.Reference( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>", load = arez.annotations.LinkType.<%= attribute.arez.lazy? ? 'LAZY' : 'EXPLICIT' %><% if attribute.inverse.arez.traversable? %>, inverseName = "<%= attribute.inverse.multiplicity == :many ? Reality::Naming.camelize(Reality::Naming.pluralize(attribute.inverse.name)) : Reality::Naming.camelize(attribute.inverse.name) %>", inverseMultiplicity = arez.annotations.Multiplicity.<%= attribute.inverse.arez.multiplicity.to_s.upcase %><% end -%> )
  <%= annotated_type(attribute, :arez, :default, :public => !entity.arez.module_local?, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>();

  @arez.annotations.ReferenceId( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>" )
  <%= annotated_type(attribute, :arez, :transport, :assume_generated => true, :public => !entity.arez.module_local?) %> <%= getter_prefix(attribute) %><%= attribute.arez.name(:transport) %>()
  {
    return _<%= Reality::Naming.camelize(attribute.arez.name(:transport)) %>;
  }
<% else -%>

  @arez.annotations.Reference( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>", load = arez.annotations.LinkType.<%= attribute.arez.lazy? ? 'LAZY' : 'EXPLICIT' %><% if attribute.inverse.arez.traversable? %>, inverseName = "<%= attribute.inverse.multiplicity == :many ? Reality::Naming.camelize(Reality::Naming.pluralize(attribute.inverse.name)) : Reality::Naming.camelize(attribute.inverse.name) %>", inverseMultiplicity = arez.annotations.Multiplicity.<%= attribute.inverse.arez.multiplicity.to_s.upcase %><% end -%> )
  <%= annotated_type(attribute, :arez, :default, :public => true, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>();

  @arez.annotations.Observable( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>", initializer = arez.annotations.Feature.ENABLE )
  @arez.annotations.ReferenceId( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>" )
  <%= annotated_type(attribute, :arez, :transport, :assume_generated => true, :public => !entity.arez.module_local?, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name(:transport) %>();

  @arez.annotations.Observable( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>" )
  abstract void set<%= attribute.arez.name(:transport) %>( <%= annotated_type(attribute, :arez, :transport, :assume_generated => true) %> <%= Reality::Naming.camelize(attribute.arez.name(:transport)) %> );
<% end -%>
<% else -%>
<% if attribute.immutable? -%>

<% if attribute.primary_key? -%>
  @arez.annotations.ComponentId
<% end -%>
  <%= annotated_type(attribute, :arez, :default, :assume_generated => true, :public => !entity.arez.module_local?) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>()
  {
    return _<%= Reality::Naming.camelize(attribute.arez.name) %>;
  }
<% else -%>

  @arez.annotations.Observable( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>", initializer = arez.annotations.Feature.ENABLE )
  <%= annotated_type(attribute, :arez, :default, :public => !entity.arez.module_local?, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>();

  @arez.annotations.Observable( name = "<%= Reality::Naming.camelize(attribute.arez.name) %>" )
  abstract void set<%= attribute.arez.name %>( <%= annotated_type(attribute, :arez, :default) %> <%= Reality::Naming.camelize(attribute.arez.name) %> );
<% end -%>
<% end -%>
<% end -%>
<% entity.declared_attributes.select{|attribute| attribute.abstract? && attribute.arez? }.each do |attribute|
%>  <%= annotated_type(attribute, :arez, :default, :assume_generated => true, :public => !entity.arez.module_local?, :abstract => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name %>();
<% if attribute.attribute_type == :reference
  %>  abstract <%= attribute.arez.java_type(:transport, :assume_generated => true) %> <%= getter_prefix(attribute) %><%= attribute.arez.name(:transport) %>();
<% end -%>
<% unless attribute.immutable? -%>

    abstract void set<%= attribute.arez.name(:transport) %>( <%= attribute.arez.java_type(:transport) %> value );
<% end -%>
<% end -%>
<% entity.arez.referencing_client_side_attributes.each do |attribute|
        name = attribute.inverse.name
        type = attribute.entity.arez.qualified_name
        if attribute.inverse.multiplicity == :many
          name = Reality::Naming.pluralize(name) -%>

  @arez.annotations.Inverse( name = "<%= Reality::Naming.camelize(name) %>", referenceName = "<%= Reality::Naming.camelize(attribute.name) %>" )
  @javax.annotation.Nonnull
  <%= attribute.inverse.arez.module_local? ? '' : 'public ' %>abstract java.util.List<<%= type %>> <%= getter_prefix(attribute) %><%= name %>();
<% else -%>

  @arez.annotations.Inverse( name = "<%= Reality::Naming.camelize(name) %>", referenceName = "<%= Reality::Naming.camelize(attribute.name) %>" )
  <%= nullability_annotation(attribute.inverse.arez.nullable?)  %>
  <%= entity.arez.module_local? ? '' : 'public ' %>abstract <%= type %> <%= getter_prefix(attribute) %><%= name %>();
<% end -%>
<% end -%>
<% if entity.arez.extensions.size > 0 -%>

  @javax.annotation.Nonnull
  public <%= entity.arez.name %> self()
  {
    return this;
  }
<% end %>
}
