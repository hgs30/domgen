/* DO NOT EDIT: File is auto-generated */
package <%= to_package(method.jms.qualified_mdb_name) %>;
<%

config_properties = {}
config_properties['connectionFactoryLookup'] = "#{method.service.data_module.repository.jms.qualified_constants_container_name}.CONNECTION_FACTORY_RESOURCE_NAME"
config_properties['destinationLookup'] = "#{method.service.data_module.repository.jms.qualified_constants_container_name}.#{Reality::Naming.uppercase_constantize(method.jms.destination.name)}_RESOURCE_NAME"
config_properties['destinationType'] = "\"#{method.jms.destination.destination_type}\""
config_properties['messageSelector'] = "\"#{method.jms.message_selector}\"" if method.jms.message_selector
config_properties['acknowledgeMode'] = "\"#{method.jms.acknowledge_mode}\""
config_properties['clientID'] = "\"#{method.jms.client_id}\"" if method.jms.client_id
config_properties['subscriptionName'] = "\"#{method.jms.subscription_name}\"" if method.jms.subscription_name
if config_properties['destinationType']=='javax.jms.Topic'
  config_properties['subscriptionDurability'] = method.jms.durable? ? '"Durable"' : '"NonDurable"'
end

-%>

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@javax.ejb.MessageDriven( name = "<%= method.jms.mdb_resource_name %>",
                          activationConfig =
                            {
<%
index = 0
config_properties.each_pair do |key, value|
 index += 1
 -%>
                              @javax.ejb.ActivationConfigProperty( propertyName = "<%= key %>", propertyValue = <%= value %> )<%= config_properties.size == index ? '' : ',' %>
<% end -%>
                            } )
@javax.ejb.TransactionManagement( javax.ejb.TransactionManagementType.CONTAINER )
@javax.ejb.TransactionAttribute( javax.ejb.TransactionAttributeType.NOT_SUPPORTED )
@javax.ejb.ConcurrencyManagement( javax.ejb.ConcurrencyManagementType.BEAN )
// Note that this class MUST remain public to cater for an older version of GlassFish that
// can not load the class if the class is package access
public class <%= method.jms.mdb_name %>
  implements javax.jms.MessageListener
{
<% parameter = method.parameters.empty? ? nil : method.parameters[0] -%>
  @javax.annotation.Nonnull
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= method.jms.mdb_name %>.class.getName() );
  @javax.inject.Inject
  private <%= method.service.ejb.generate_boundary? ? method.service.ejb.qualified_boundary_service_name : method.service.ejb.qualified_service_name %> _service;
<%
  parameter = method.parameters.empty? ? nil : method.parameters[0]
  if parameter
    Domgen.error("parameters for #{method.qualified_name} should only have 1 parameter") unless method.parameters.size == 1
    encoded_type = parameter.non_standard_type? ? parameter.parameter_type : "#{parameter.name}Message"
    boundary_type = parameter.ejb.java_component_type(:boundary)
    demarshalled_type = parameter.struct? ? boundary_type : encoded_type
    in_container = !(parameter.struct? && !parameter.collection?)
  end
-%>

  @java.lang.Override
  public void onMessage( @javax.annotation.Nonnull final javax.jms.Message message )
  {
    try
    {
      if ( message instanceof javax.jms.TextMessage )
      {
<%
  if parameter
-%>
        final var textMessage = (javax.jms.TextMessage) message;
        final var text = textMessage.getText();
        final var context = javax.xml.bind.JAXBContext.newInstance( <%= parameter.jms.object_factory ? parameter.jms.object_factory : encoded_type %>.class );
        final var marshaller = context.createUnmarshaller();

        final <%= demarshalled_type %> decoded;

        try ( var reader = new java.io.StringReader( text ) )
        {
          decoded = (<%=demarshalled_type%>)(<%if parameter.jms.object_factory%>(javax.xml.bind.JAXBElement)<%end%>marshaller.unmarshal(reader))<%if parameter.jms.object_factory%>.getValue()<%end%>;
        }
        final var parameter = <%= ((parameter.struct? || parameter.non_standard_type?) && !parameter.collection?) ? 'decoded' : 'decoded.Value' %>;
<% end -%>
        _service.<%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.empty? ? '' : ' parameter ' %>);
      }
      else
      {
        throw new RuntimeException( "<%= method.jms.mdb_name %> can only process TextMessages but received a " + message.getClass() );
      }
    }
    catch ( final Exception e )
    {
      LOG.log( java.util.logging.Level.WARNING, "Error processing the incoming message: " + e.getMessage(), e );
      throw new RuntimeException( e );
    }
  }
<%
  if parameter && !parameter.non_standard_type?
-%>

  @javax.xml.bind.annotation.XmlRootElement( name = "<%= parameter.xml.name %>" )
  @javax.xml.bind.annotation.XmlAccessorType( javax.xml.bind.annotation.XmlAccessType.FIELD )
  @javax.xml.bind.annotation.XmlType( name = "<%= method.name %><%= method.service.name %>_<%= parameter.name %>"<% if in_container %>, propOrder = {"Value"}<% end %> )
  public static class <%= encoded_type %>
<% unless in_container -%>
      extends <%= parameter.referenced_struct.ee.qualified_name %>
<% end -%>
  {
<% if in_container -%>
    @javax.xml.bind.annotation.XmlValue
    <%= boundary_type %> Value;
<% else -%>
<% if parameter.referenced_struct.fields.size != 0 -%>
  @java.lang.SuppressWarnings( "deprecation" )
  public <%= encoded_type %>()
  {
    super();
  }

  public <%= encoded_type %>( <%= parameter.referenced_struct.fields.collect {|field| "#{annotated_type(field, :ee, :boundary, :final => true)} #{Reality::Naming.camelize(field.name)}" }.join(', ') %> )
  {
    super( <%= parameter.referenced_struct.fields.collect {|field| Reality::Naming.camelize(field.name) }.join(', ') %> );
  }
<% end -%>
<% end -%>
  }
<% end -%>
}
