/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_client_router_name) %>;

@java.lang.SuppressWarnings( "unchecked" )
final class <%= repository.imit.client_router_name %>
{
<%
  repository.imit.graphs.select{|graph|graph.filtered?}.each do |graph|
    graph.routing_keys.each do |routing_key|
-%>
  static final String <%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY = "<%= repository.name %>.<%= graph.name %>.<%= routing_key.name %>";
<%
    end
  end
-%>

<%
  repository.imit.graphs.select{|graph|graph.filtered?}.each do |graph|
    graph.routing_keys.each do |routing_key|
-%>
  private void put_<%= graph.name %>_<%= routing_key.name %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, final <%= routing_key.target_attribute.imit.non_primitive_java_type %> value )
  {
<% if routing_key.multivalued? -%>
    ( (java.util.List<Integer>) map.computeIfAbsent( <%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY, k -> new java.util.ArrayList<>() ) ).add( value );
<% else -%>
    map.put( <%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY, value );
<% end -%>
  }

<%
      unless routing_key.target_nullsafe?
        index = 0
        a = routing_key.imit_attribute.attribute
        e = a.reference? ? a.referenced_entity : a.entity
        is_inverse = routing_key.inverse_start?
        routing_key.path.each do |path_element|
          next_is_inverse = routing_key.is_inverse_path_element?(path_element)
          n = routing_key.get_attribute_name_from_path_element?(path_element)
          next_attribute =
            next_is_inverse ?
            a.entity.arez.referencing_client_side_attributes.select {|attr| attr.inverse.name.to_s == n.to_s}[0] :
            e.attribute_by_name(n)
-%>
  private void route_<%= graph.name %>_<%= routing_key.name %>_<%= index %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, <%= nullability_annotation(a.nullable?) %> final <%= (is_inverse ? a.entity : a.referenced_entity).arez.qualified_name %> value )
  {
<% if a.nullable? -%>
    if( null != value )
    {
<% end -%>
<% if routing_key.is_path_element_recursive?(path_element) -%>
    route_<%= graph.name %>_<%= routing_key.name %>_<%= index + 1 %>( map, value );
    route_<%= graph.name %>_<%= routing_key.name %>_<%= index %>( map, value.<%= getter_for(next_attribute) %> );
<% elsif next_is_inverse -%>
    for( final <%= next_attribute.entity.arez.qualified_name %> v : value.get<%= next_attribute.inverse.multiplicity == :many ? Reality::Naming.pluralize(next_attribute.inverse.name) : next_attribute.inverse.name %>() )
    {
      route_<%= graph.name %>_<%= routing_key.name %>_<%= index + 1 %>( map, v );
    }
<% else -%>
    route_<%= graph.name %>_<%= routing_key.name %>_<%= index + 1 %>( map, value.<%= getter_for(next_attribute) %> );
<% end -%>
<% if a.nullable? -%>
    }
<% end -%>
  }

<%
          index = index + 1
          is_inverse = next_is_inverse
          a = next_attribute
          e = a.entity
        end
-%>
  private void route_<%= graph.name %>_<%= routing_key.name %>_<%= index %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, <%= nullability_annotation(a.nullable?) %> final <%= (is_inverse ? a.entity : a.referenced_entity).arez.qualified_name %> value )
  {
<% if a.nullable? -%>
    if( null != value )
    {
<% end -%>
<% attr = (is_inverse ? a.entity : a.referenced_entity).attribute_by_name(routing_key.attribute_name) -%>
    put_<%= graph.name %>_<%= routing_key.name %>( map, value.<%= getter_for(attr) %> );
<% if a.nullable? -%>
    }
<% end -%>
  }

<%
      end
    end
  end
-%>
  @javax.annotation.Nonnull
  java.util.Map<String, java.io.Serializable> route( @javax.annotation.Nonnull final Object entity )
  {
  <%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.select { |entity| entity.imit? && entity.concrete? }.each do |entity|
-%> if( entity instanceof <%= entity.arez.qualified_name %> )
    {
      return route<%= entity.name %>( (<%= entity.arez.qualified_name %>) entity );
    }
    else<%
  end
end
-%>

    {
      return java.util.Collections.emptyMap();
    }
  }
<%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.select { |entity| entity.imit? && entity.concrete? }.each do |entity|
    outgoing_links = entity.attributes.select {|a| a.reference? && a.arez? && a.inverse.imit.traversable? && a.referenced_entity.arez?}
 -%>

  @javax.annotation.Nonnull
  private java.util.Map<String, java.io.Serializable> route<%= entity.name %>( @javax.annotation.Nonnull final <%= entity.arez.qualified_name %> entity )
  {
    final java.util.HashMap<String, java.io.Serializable> map = new java.util.HashMap<>();
<% entity.imit.replication_graphs.each do |graph| -%>
    _route<%= graph.name %>_<%= entity.name %>( map, entity );
<% end -%>
    return map;
  }
<% entity.imit.replication_graphs.each do |graph| -%>

  private void _route<%= graph.name %>_<%= entity.name %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, @javax.annotation.Nonnull final <%= entity.arez.qualified_name %> entity )
  {
<% if graph.filtered? -%>
<%
  graph.routing_keys.select{|rk| rk.imit_attribute.attribute.entity.name == entity.name}.each do |routing_key|
    initial_attr = routing_key.imit_attribute.attribute
    if !routing_key.reference?
-%>
    put_<%= graph.name %>_<%= routing_key.name %>( map, entity<% unless initial_attr.primary_key? %>.<%= getter_for(initial_attr) %><% end %> );
<% elsif routing_key.target_nullsafe?
    a = initial_attr
    v = ''
    path = initial_attr.primary_key? ? ['entity'] : ["entity.#{getter_for(a)}"]
    v = "#{path.join('.')} == null ? null : " if a.nullable?
    routing_key.path.each do |path_element|
      a = a.referenced_entity.attribute_by_name(routing_key.get_attribute_name_from_path_element?(path_element))
      path << getter_for(a)
      if a.nullable?
        v = "#{v}#{path.join('.')} == null ? null : "
      end
    end
    path << getter_for(a.referenced_entity.attribute_by_name(routing_key.attribute_name))
    v = "#{v}#{path.join('.')}"
-%>
    put_<%= graph.name %>_<%= routing_key.name %>( map, <%= v %> );
<% else -%>
    route_<%= graph.name %>_<%= routing_key.name %>_0( map, entity<% unless initial_attr.primary_key? %>.<%= getter_for(initial_attr) %><% end %> );
<% end -%>
<% end -%>
<% end -%>
<% if graph.instance_root? && graph.instance_root.to_s == entity.qualified_name.to_s -%>
    addInstanceRoot( map, <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_NAME, entity.<%= getter_for(entity.primary_key) %> );
<% elsif graph.instance_root? -%>
<% outgoing_links.select{|a| a.referenced_entity.imit.replication_graphs.include?(graph) }.each do |outgoing_link| -%>
<% if outgoing_link.nullable? -%>
    {
      final <%= outgoing_link.imit.java_type %> v = entity.<%= getter_for(outgoing_link) %>;
      if( null != v )
      {
        _route<%= graph.name %>_<%= outgoing_link.referenced_entity.name %>( map, v );
      }
    }
<% else -%>
    _route<%= graph.name %>_<%= outgoing_link.referenced_entity.name %>( map, entity.<%= getter_for(outgoing_link) %> );
<% end -%>
<% end -%>
<% else -%>
    map.put( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_NAME, Boolean.TRUE );
<% end -%>
  }
<% end -%>
<% end -%>
<% end -%>

  private boolean addInstanceRoot( @javax.annotation.Nonnull final java.util.Map<java.lang.String, java.io.Serializable> map, @javax.annotation.Nonnull final java.lang.String key, @javax.annotation.Nonnull final java.lang.Integer id )
  {
    return ( (java.util.List<java.lang.Integer>) map.computeIfAbsent( key, v -> new java.util.ArrayList<>() ) ).add( id );
  }
}
