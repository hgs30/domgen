/* DO NOT EDIT: File is auto-generated */
package <%= to_package(exception.imit.qualified_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "GwtInconsistentSerializableClass" } )
<% unless exception.imit.module_local? %>public <% end %><% if exception.abstract? %>abstract <% end %>class <%= exception.imit.name %> extends <%= exception.extends.nil? ? exception.java.standard_extends : exception.data_module.exception_by_name(exception.extends).imit.qualified_name %>
{
<% exception.declared_parameters.each do |parameter| -%>
  <%= annotated_type(parameter, :imit, :transport, :private => true, :final => true, :assume_generated => true) %> <%= parameter.name %>;
<% end -%>
<%
param_desc =
exception.parameters.collect do |parameter|
  "#{annotated_type(parameter, :imit, :transport, :final => true, :assume_generated => true) } #{parameter.name}"
  end.join(', ')
param_desc_with_suffix = param_desc + (param_desc.size == 0 ? '' : ', ')

param_values = exception.parameters.collect{ |parameter| parameter.name}.join(', ')
param_values_with_suffix = param_values + (param_values.size == 0 ? '' : ', ')

inherited_params = exception.inherited_parameters.collect{ |parameter| parameter.name}.join(', ')
inherited_params_with_suffix = inherited_params + (inherited_params.size == 0 ? '' : ', ')

constructor_access = exception.imit.module_local? ? '' : exception.abstract? ? 'protected ' : 'public '

if exception.imit.support_default_parameters? -%>

  <%= constructor_access %><%= exception.imit.name %>( <%= param_desc %> ) { this( <%= param_values_with_suffix %>null, null ); }

  <%= constructor_access %><%= exception.imit.name %>( <%= param_desc_with_suffix %>final String message ) { this( <%= param_values_with_suffix %>message, null ); }

  <%= constructor_access %><%= exception.imit.name %>( <%= param_desc_with_suffix %>final Throwable cause ) { this( <%= param_values_with_suffix %>null, cause ); }
<% end -%>
<% unless exception.parameters.empty? -%>

  <%= constructor_access %><%= exception.imit.name %>( <% if exception.imit.support_default_parameters? -%><%= param_desc_with_suffix %>final String message, final Throwable cause<% else %><%= param_desc %><% end -%> )
  {
<% if exception.imit.support_default_parameters? -%>
    super( <%= inherited_params_with_suffix %>message, cause );
<% end -%>
<% exception.declared_parameters.each do |parameter|
  if :sequence == parameter.collection_type
%>    this.<%= parameter.name %> = java.util.Collections.unmodifiableList( new java.util.ArrayList<>( <%= parameter.name %> ) );
<%     elsif :set == parameter.collection_type
%>    this.<%= parameter.name %> = java.util.Collections.unmodifiableSet( new java.util.HashSet<>( <%= parameter.name %> ) );
<%     else
  %>    this.<%= parameter.name %> = <%= parameter.name %>;
<%   end -%>
<% end -%>
  }

<% exception.declared_parameters.each do |parameter| -%>

  <%= annotated_type(parameter, :imit, :boundary, :public => !exception.imit.module_local?, :assume_generated => true) %> <%= getter_prefix(parameter) %><%= parameter.name %>()
  {
<%-
  if parameter.collection?
conversion_rule =
  case
when parameter.date? then Proc.new {|transport_value| "#{parameter.struct.data_module.repository.gwt.qualified_rdate_name}.parse( #{transport_value} )"}
when parameter.enumeration? then Proc.new {|transport_value| "#{parameter.gwt.java_component_type}.#{parameter.enumeration.textual_values? ? "valueOf( #{transport_value} )" : "values()[ #{parameter.nullable? ? "#{transport_value}.intValue()" : transport_value} ]"}"}
  else nil
  end
-%>
  return <% if parameter.nullable? -%>this.<%= parameter.name %> == null ? null : <% end -%>java.util.Arrays.stream( this.<%= parameter.name %> )<%= conversion_rule.nil? ? '' : ".map( e -> #{conversion_rule.call('e')} )" %>.collect( java.util.stream.Collectors.to<%= parameter.collection_type == :set ? 'Set' : 'List' %>() );
<% elsif parameter.datetime? -%>
  return  this.<%= parameter.name %>;
<% elsif parameter.date? -%>
  return <% if parameter.nullable? -%>this.<%= parameter.name %> == null ? null : <% end -%><%= struct.data_module.repository.gwt.qualified_rdate_name %>.parse( this.<%= parameter.name %> );
<% elsif parameter.enumeration? -%>
  return <% if parameter.nullable? -%>this.<%= parameter.name %> == null ? null : <% end -%><%= parameter.gwt.java_type %>.<%= parameter.enumeration.textual_values? ? "valueOf( this.#{parameter.name} )" : "values()[ #{parameter.nullable? ? "#{parameter.name}.intValue()" : parameter.name} ]" %>;
<% elsif parameter.struct? || parameter.text? || parameter.real? || parameter.boolean? || (parameter.integer? && !parameter.nullable?) -%>
  return this.<%= parameter.name %>;
<% elsif parameter.integer? && parameter.nullable? -%>
  return <% if parameter.nullable? -%>this.<%= parameter.name %> == null ? null : <% end -%>this.<%= parameter.name %>.intValue();
<% elsif parameter.long? -%>
  return <% if parameter.nullable? -%>this.<%= parameter.name %> == null ? null : <% end -%>this.<%= parameter.name %>.longValue();
<% elsif parameter.reference? -%>
  return <% if parameter.nullable? -%>this.<%= parameter.name %> == null ? null : <% end -%>this.<%= parameter.name %><% unless parameter.nullable? -%><% end -%>;
<% end -%>
  }
<% end -%>
<% end -%>
}
