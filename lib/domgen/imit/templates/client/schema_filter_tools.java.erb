/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_schema_filter_tools_name) %>;
<% entities = repository.data_modules.select { |data_module| data_module.imit? }.collect{|data_module| data_module.entities.select{|entity| entity.imit? && entity.concrete?} }.flatten -%>

@java.lang.SuppressWarnings( "JavaDoc" )
final class <%= repository.imit.schema_filter_tools_name %>
{
  private <%= repository.imit.schema_filter_tools_name %>()
  {
  }
<%
  # A mapping between entity and any mutable routing keys defined by that entity
  entity_routing_keys = {}
  # A mapping between entity and a internal filtered graph
  entity_internal_graphs = {}
  repository.imit.graphs.select {|g| g.filtered?}.each do |graph|
    graph.routing_keys.select{|routing_key| !routing_key.target_attribute.immutable?}.each do |routing_key|
      (entity_routing_keys[routing_key.target_attribute.entity] ||= []) << routing_key
    end
    # We guess that any internal filtering graphs with no parameters may need customization
    if !graph.filter_parameter? && graph.dynamic_filter?
      graph.included_entities.collect{|name| repository.entity_by_name(name)}.each do |entity|
        (entity_internal_graphs[entity] ||= []) << graph
      end
    end
  end
-%>
<% unless entity_routing_keys.empty? -%>

  static void onEntityUpdateAction( @javax.annotation.Nonnull final <%= repository.imit.qualified_gwt_client_session_context_name %> context, @javax.annotation.Nonnull final replicant.ReplicantContext replicantContext, @javax.annotation.Nonnull final Object entity )
  {
<% entity_routing_keys.keys.each do |entity| -%>
    if ( entity instanceof <%= entity.arez.qualified_name %> )
    {
      final <%= entity.arez.qualified_name %> $entity = (<%= entity.arez.qualified_name %>) entity;
<% entity_routing_keys[entity].each do |routing_key| -%>
      on<%= routing_key.graph.name %><%= routing_key.name %>RoutingKeyUpdate( context, replicantContext<% if routing_key.target_attribute.entity != routing_key.imit_attribute.attribute.entity %>, $entity<% end %> );
<% end -%>
<% (entity_internal_graphs[entity] || []).each do |graph| -%>
      context.on<%= graph.name %><%= entity.name %>EntityUpdate( replicantContext, $entity );
<% end -%>
    }
<% end -%>
<% entity_internal_graphs.keys.select{|e|entity_routing_keys[e].nil?}.each do |entity| -%>
    if ( entity instanceof <%= entity.arez.qualified_name %> )
    {
      final <%= entity.arez.qualified_name %> $entity = (<%= entity.arez.qualified_name %>) entity;
<% (entity_internal_graphs[entity]).each do |graph| -%>
      context.on<%= graph.name %><%= entity.name %>EntityUpdate( replicantContext, $entity );
<% end -%>
    }
<% end -%>
  }
<% entity_routing_keys.values.each do |routing_keys| -%>
<% routing_keys.each do |routing_key| -%>

  private static void on<%= routing_key.graph.name %><%= routing_key.name %>RoutingKeyUpdate( @javax.annotation.Nonnull final <%= repository.imit.qualified_gwt_client_session_context_name %> context, @javax.annotation.Nonnull final replicant.ReplicantContext replicantContext<% if routing_key.target_attribute.entity != routing_key.imit_attribute.attribute.entity %>, @javax.annotation.Nonnull final <%= routing_key.target_attribute.entity.arez.qualified_name %> entity<% end %> )
  {
    for ( final replicant.Subscription subscription : replicantContext.getInstanceSubscriptions() )
    {
      if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(routing_key.graph.name) %> == subscription.address().channelId() )
      {
        for ( final replicant.Entity replicantEntity : subscription.findAllEntitiesByType( <%= routing_key.imit_attribute.attribute.entity.arez.qualified_name %>.class ) )
        {
<% if routing_key.graph.filter_parameter? -%>
          final Object filter = subscription.getFilter();
          assert null != filter;
<% end -%>
          if ( context.shouldDelinkOn<%= routing_key.graph.name %><%= routing_key.name %>RoutingKeyUpdate( <% if routing_key.graph.filter_parameter? %>(<%= Domgen::Java.java_type(routing_key.graph.filter_parameter, :gwt, :default) %>) filter, <% end %>(<%= routing_key.imit_attribute.attribute.entity.arez.qualified_name %>) replicantEntity.getUserObject()<% if routing_key.target_attribute.entity != routing_key.imit_attribute.attribute.entity %>, entity <% end %> ) )
          {
            replicantEntity.delinkFromFilteringSubscription( subscription );
          }
        }
      }
    }
  }
<% end -%>
<% end -%>
<% end -%>
<% repository.imit.graphs.select{|g| g.filter_parameter? && !g.filter_parameter.immutable?}.each do |graph| -%>

  @java.lang.SuppressWarnings( { "ConstantConditions", "unchecked" } )
  static boolean doesEntityMatch<%= graph.name %>Filter( @javax.annotation.Nonnull final <%= repository.imit.qualified_gwt_client_session_context_name %> context, @javax.annotation.Nonnull final <%= repository.imit.qualified_client_router_name %> router, @javax.annotation.Nonnull final <%= Domgen::Java.java_type(graph.filter_parameter, :gwt, :default) %> filter, @javax.annotation.Nonnull final replicant.Entity entity )
  {
      final Object userObject = entity.getUserObject();
      assert null != userObject;
<% if graph.instance_root? || (graph.filtered? && graph.routing_keys.size > 0) -%>
      final java.util.Map<java.lang.String, java.io.Serializable> route = router.route( userObject );
<% end -%>
<%
  extra_interest_filter = ''
  if graph.instance_root?
    entity = repository.entity_by_name(graph.instance_root)
    singular_root_var_name = Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}")
    root_var_name = Reality::Naming.pluralize(singular_root_var_name)
    extra_interest_filter = ", #{singular_root_var_name}"
-%>
      @javax.annotation.Nonnull
      @java.lang.SuppressWarnings( "unchecked" )
      final java.util.List<<%= entity.primary_key.imit.non_primitive_java_type %>> <%= root_var_name %> = (java.util.List<<%= entity.primary_key.imit.non_primitive_java_type %>>) route.get( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_NAME );
      assert null != <%= root_var_name %>;
<% end -%>
<%
  if graph.filtered?
    graph.routing_keys.each do |routing_key|
      var_name = Reality::Naming.camelize(routing_key.name)
      nullable = !graph.instance_root? || !(routing_key.imit_attribute.attribute.entity.qualified_name == graph.instance_root)
      param_type = routing_key.target_attribute.imit.non_primitive_java_type
      param_type = "java.util.List<#{param_type}>" if routing_key.multivalued?
      extra_interest_filter << ", #{var_name}"
-%>
      <%= nullability_annotation(nullable) %>
      final <%= param_type %> <%= var_name %> = (<%= param_type %>) route.get( <%= repository.imit.qualified_client_router_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY );
<% if !nullable -%>
      assert null != <%= var_name %>;
<% end -%>
<%
    end
  end
-%>
<% if graph.instance_root? -%>
      for( final <%= entity.primary_key.imit.non_primitive_java_type %> <%= singular_root_var_name %>: <%= root_var_name %> )
      {
<% end -%>
        if( context.does<%= graph.name %>MatchEntity( filter, userObject<%= extra_interest_filter %> ) )
        {
          return true;
        }
<% if graph.instance_root? -%>
      }
<% end -%>
      return false;
  }
<% end -%>
}
