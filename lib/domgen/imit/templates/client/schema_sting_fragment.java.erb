/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_schema_sting_fragment_name) %>;
<% entities = repository.data_modules.select { |data_module| data_module.imit? }.collect{|data_module| data_module.entities.select{|entity| entity.imit? && entity.concrete?} }.flatten -%>

@sting.Fragment
public interface <%= repository.imit.schema_sting_fragment_name %>
{
  @javax.annotation.Nonnull
  @sting.Named( "<%= repository.name %>" )
  default replicant.SystemSchema provideSystemSchema( @javax.annotation.Nonnull final <%= repository.imit.qualified_gwt_client_session_context_name %> context, <%= entities.collect{|e|"@javax.annotation.Nonnull final #{e.dao.arez.qualified_repository_name} #{Reality::Naming.camelize(e.qualified_name.gsub('.',''))}Repository"}.join(', ') %> )
  {
    final <%= repository.imit.qualified_client_router_name %> router = new <%= repository.imit.qualified_client_router_name %>();
<% entities.each do |entity| -%>
    final replicant.EntitySchema entity<%= entity.data_module.name %><%= entity.name %> =
      new replicant.EntitySchema( <%= repository.imit.qualified_entity_type_constants_name %>.<%= Reality::Naming.uppercase_constantize(entity.data_module.name.to_s) %>_<%= Reality::Naming.uppercase_constantize(entity.name.to_s) %>,
                                  replicant.Replicant.areNamesEnabled() ? <%= repository.imit.qualified_entity_type_constants_name %>.<%= Reality::Naming.uppercase_constantize(entity.data_module.name.to_s) %>_<%= Reality::Naming.uppercase_constantize(entity.name.to_s) %>_NAME : null,
                                  <%= entity.arez.qualified_name %>.class,
                                  (id, data) -> <%= entity.data_module.imit.qualified_mapper_name %>.create<%= entity.name %>( <%= Reality::Naming.camelize(entity.qualified_name.gsub('.','')) %>Repository, id, data ),
                                  <%= entity.data_module.imit.qualified_mapper_name %>::update<%= entity.name %>,
                                  new replicant.ChannelLinkSchema[]{ <%= entity.attributes.select{|a| a.imit?}.collect{|a| a.imit.graph_links.collect{|g| "new replicant.ChannelLinkSchema(#{repository.imit.qualified_subscription_constants_name}.#{Reality::Naming.uppercase_constantize(g.source_graph)}, #{repository.imit.qualified_subscription_constants_name}.#{Reality::Naming.uppercase_constantize(g.target_graph)}, #{g.auto?}, new java.lang.String[]{#{([a.name] + ([g.path])).flatten.compact.collect{|p| "\"#{p.to_s}\""}.join(', ')}} )" }}.flatten.join(', ') %>} );
<% end %>
<% repository.imit.graphs.each do |graph| -%>
    final replicant.ChannelSchema channel<%= graph.name %> =
      new replicant.ChannelSchema( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>,
                                   replicant.Replicant.areNamesEnabled() ? <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_NAME : null,
                                   <%= graph.instance_root? ? "#{repository.entity_by_name(graph.instance_root).arez.qualified_name}.class" : 'null' %>,
                                   replicant.ChannelSchema.FilterType.<%= !graph.filtered? ? 'NONE' : !graph.filter_parameter? ? 'INTERNAL' : graph.filter_parameter.immutable? ? 'STATIC' : 'DYNAMIC' %>,
                                   <% if graph.filter_parameter? && !graph.filter_parameter.immutable? %>(<%= Domgen::Java.java_type(graph.filter_parameter, :gwt, :default) %> filter, replicant.Entity entity) -> <%= repository.imit.qualified_schema_filter_tools_name %>.doesEntityMatch<%= graph.name %>Filter( context, router, filter, entity )<% else %>null<% end %>,
                                   <%= graph.cacheable? %>,
                                   <%= graph.external_visibility? %>,
                                   java.util.Arrays.asList( <%= (graph.instance_root? ? graph.reachable_entities : graph.type_roots).sort.collect{|name| repository.entity_by_name(name)}.collect{|entity| "entity#{entity.data_module.name}#{entity.name}"}.join(', ') %> ) );
<% end -%>

    return new replicant.SystemSchema( <%= repository.imit.qualified_system_constants_name %>.SCHEMA_ID,
                                       replicant.Replicant.areNamesEnabled() ? "<%= repository.name %>" : null,
                                       <%= repository.imit.graphs.any?{|g| g.filtered? && g.routing_keys.any?{|routing_key| !routing_key.target_attribute.immutable?}} ? "( replicant.ReplicantContext replicantContext, Object entity ) -> #{repository.imit.qualified_schema_filter_tools_name}.onEntityUpdateAction( context, replicantContext, entity )": 'null' %>,
                                       new replicant.ChannelSchema[]{ <%= repository.imit.graphs.collect{|graph| "channel#{graph.name}" }.join(', ') %> },
                                       new replicant.EntitySchema[]{ <%= entities.collect{|entity| "entity#{entity.data_module.name}#{entity.name}"}.join(', ') %> } );
  }
}
