/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_schema_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "NonJREEmulationClassesInClientCode", "SameParameterValue" } )
public final class <%= repository.imit.schema_test_name %>
  extends <%= repository.gwt.qualified_client_entity_test_name %>
{<% repository.imit.graphs.each do |graph| -%>

  @org.testng.annotations.Test
  void <%= Reality::Naming.camelize(graph.name) %>Channel()
  {
<% if graph.instance_root? -%>
    assertInstanceChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, <%= repository.entity_by_name(graph.instance_root).arez.qualified_name %>.class );
<% else -%>
    assertTypeChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% end -%>
    assertChannelFilterType( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, replicant.ChannelSchema.FilterType.<%= !graph.filtered? ? 'NONE' : !graph.filter_parameter? ? 'INTERNAL' : graph.filter_parameter.immutable? ? 'STATIC' : 'DYNAMIC' %> );
<% if graph.cacheable? -%>
    assertCacheableChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% else -%>
    assertNotCacheableChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% end -%>
<% if graph.external_visibility? -%>
    assertExternalChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% else -%>
    assertInternalChannel( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
<% end -%>
    assertChannelEntities( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, <%= graph.included_entities.sort.collect{|name| repository.entity_by_name(name)}.collect{|entity| "#{repository.imit.qualified_entity_type_constants_name}.#{Reality::Naming.uppercase_constantize(entity.data_module.name.to_s)}_#{Reality::Naming.uppercase_constantize(entity.name.to_s)}" }.join(', ') %> );
    assertInwardChannelLinkCount( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, <%= graph.instance_root? ? graph.inward_graph_links.size : 0 %> );
    assertOutwardChannelLinkCount( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, <%= graph.outward_graph_links.size %> );
<% if graph.instance_root? -%>
<% graph.inward_graph_links.each do |graph_link| -%>
    assertInwardChannelLink( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>,
                             <%= repository.imit.qualified_entity_type_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph_link.imit_attribute.attribute.entity.qualified_name.gsub('.','_')) %>,
                             <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph_link.source_graph) %>,
<% unless graph_link.auto? -%>
                             true,
<% end -%>
                             "<%= graph_link.imit_attribute.attribute.name %><%= graph_link.path.nil? ? '' : '.' + [graph_link.path].flatten.compact.collect{|p|p.to_s}.join(".") %>" );
<% end -%>
<% end -%>
<% graph.outward_graph_links.each do |graph_link| -%>
    assertOutwardChannelLink( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>,
                              <%= repository.imit.qualified_entity_type_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph_link.imit_attribute.attribute.entity.qualified_name.gsub('.','_')) %>,
                              <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph_link.target_graph) %>,
<% unless graph_link.auto? -%>
                              true,
<% end -%>
                              "<%= graph_link.imit_attribute.attribute.name %><%= graph_link.path.nil? ? '' : '.' + [graph_link.path].flatten.compact.collect{|p|p.to_s}.join(".") %>" );
<% end -%>
  }
<% end -%>
  private void assertInstanceChannel( final int channelId, @javax.annotation.Nonnull final Class<?> rootEntityType )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isInstanceChannel() );
    org.testng.Assert.assertEquals( getChannel( channelId ).getInstanceType(), rootEntityType );
  }

  private void assertTypeChannel( final int channelId )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isTypeChannel() );
  }

  private void assertInternalChannel( final int channelId )
  {
    org.testng.Assert.assertFalse( getChannel( channelId ).isExternal() );
  }

  private void assertExternalChannel( final int channelId )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isExternal() );
  }

  private void assertChannelFilterType( final int channelId, @javax.annotation.Nonnull final replicant.ChannelSchema.FilterType filterType )
  {
    org.testng.Assert.assertEquals( getChannel( channelId ).getFilterType(), filterType );
  }

  private void assertCacheableChannel( final int channelId )
  {
    org.testng.Assert.assertTrue( getChannel( channelId ).isCacheable() );
  }

  private void assertNotCacheableChannel( final int channelId )
  {
    org.testng.Assert.assertFalse( getChannel( channelId ).isCacheable() );
  }

  private void assertChannelEntities( final int channelId, final int... entityIds )
  {
    final replicant.ChannelSchema channel = getChannel( channelId );
    for ( final int entityId : entityIds )
    {
      ensureEntity( channel, entityId );
    }
    org.testng.Assert.assertEquals( channel.getEntities().size(), entityIds.length, "Expected entity count for channel " + channel );
  }

  @javax.annotation.Nonnull
  private replicant.EntitySchema ensureEntity( final int channelId, final int entityId )
  {
    return ensureEntity( getChannel( channelId ), entityId );
  }

  @javax.annotation.Nonnull
  private replicant.EntitySchema ensureEntity( @javax.annotation.Nonnull final replicant.ChannelSchema channel, final int entityId )
  {
    final replicant.EntitySchema entity = channel.findEntityById( entityId );
    org.testng.Assert.assertNotNull( entity, "Expected Entity with Id " + entityId + " in channel " + channel );
    return entity;
  }

  @javax.annotation.Nonnull
  private replicant.ChannelSchema getChannel( final int channelId )
  {
    return schema().getChannel( channelId );
  }

  private void assertInwardChannelLinkCount( final int channelId, final int count )
  {
    final java.util.List<replicant.ChannelLinkSchema> links = schema().getInwardChannelLinks( channelId );
    final replicant.ChannelSchema channel = getChannel( channelId );
    org.testng.Assert.assertEquals( links.size(),
                                    count,
                                    "Expected links to channel " + channel + " from other channels" );
  }

  private void assertOutwardChannelLinkCount( final int channelId, final int count )
  {
    final java.util.List<replicant.ChannelLinkSchema> links = schema().getOutwardChannelLinks( channelId );
    final replicant.ChannelSchema channel = getChannel( channelId );
    org.testng.Assert.assertEquals( links.size(),
                                    count,
                                    "Expected links from channel " + channel + " to other channels" );
  }

  private void assertInwardChannelLink( final int channelId, final int entityId, final int sourceChannelId, @javax.annotation.Nonnull final java.lang.String... path )
  {
    assertInwardChannelLink( channelId, entityId, sourceChannelId, true, path );
  }

  private void assertInwardChannelLink( final int channelId, final int entityId, final int sourceChannelId, final boolean auto, @javax.annotation.Nonnull final java.lang.String... path )
  {
    final java.util.List<replicant.ChannelLinkSchema> links = schema().getInwardChannelLinks( channelId, entityId );

    final java.util.List<replicant.ChannelLinkSchema> matches =
      links
        .stream()
        .filter( l -> l.getSourceChannelId() == sourceChannelId &&
                      l.isAuto() == auto &&
                      java.lang.String.join( ".", l.getPath() ).equals( java.lang.String.join( ".", path ) ) )
        .toList();
    org.testng.Assert.assertEquals( matches.size(), 1, "Expected to match a link from channel " + sourceChannelId + " (auto=" + auto + ", path=" + java.util.Arrays.asList( path ) + ")" + " but entity only has the inward links " + links );
  }

  private void assertOutwardChannelLink( final int channelId, final int entityId, final int targetChannelId, @javax.annotation.Nonnull final java.lang.String... path )
  {
    assertOutwardChannelLink( channelId, entityId, targetChannelId, true, path );
  }

  private void assertOutwardChannelLink( final int channelId, final int entityId, final int targetChannelId, final boolean auto, @javax.annotation.Nonnull final java.lang.String... path )
  {
    final replicant.ChannelSchema channel = getChannel( channelId );
    final replicant.EntitySchema entity = channel.findEntityById( entityId );
    org.testng.Assert.assertNotNull( entity, "Unable to locate entity with id " + entityId + " in channel " + channel );
    final java.util.List<replicant.ChannelLinkSchema> links = entity.getOutwardChannelLinks( channelId );

    final java.util.List<replicant.ChannelLinkSchema> matches =
      links
        .stream()
        .filter( l -> l.getTargetChannelId() == targetChannelId &&
                      l.isAuto() == auto &&
                      java.lang.String.join( ".", l.getPath() ).equals( java.lang.String.join( ".", path ) ) )
        .toList();
    org.testng.Assert.assertEquals( matches.size(), 1, "Expected to match a link to channel " + targetChannelId + " (auto=" + auto + ", path=" + java.util.Arrays.asList( path ) + ")" + " but entity only has the outward links " + links );
  }

  @javax.annotation.Nonnull
  private replicant.SystemSchema schema()
  {
    return getInjector().getSystemSchema();
  }
}
