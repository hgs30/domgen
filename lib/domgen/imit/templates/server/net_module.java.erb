/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_server_net_module_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
public class <%= repository.imit.server_net_module_name %>
  extends org.realityforge.guiceyloops.shared.AbstractModule
{
  @java.lang.Override
  protected void configure()
  {
    bindGraphEncoder();
    bindChangeRecorder();
    bindSessionContext();
    bindReplicant();
    bindReplicantMessageBroker();
  }

  protected void bindGraphEncoder()
  {
    bind( toClass( "<%= repository.imit.qualified_graph_encoder_name %>" ) ).to( toClass( "<%= repository.imit.qualified_graph_encoder_impl_name %>" ) ).in( javax.inject.Singleton.class );
  }

  protected void bindReplicantMessageBroker()
  {
    bind( toClass( "replicant.server.transport.ReplicantMessageBroker" ) ).to( toClass( "<%= repository.imit.qualified_message_broker_impl_name %>" ) ).in( javax.inject.Singleton.class );
  }

  protected void bindChangeRecorder()
  {
    bind( toClass( "<%= repository.imit.qualified_change_recorder_name %>" ) ).to( toClass( "<%= repository.imit.qualified_change_recorder_impl_name %>" ) ).in( javax.inject.Singleton.class );
  }

  protected void bindSessionContext()
  {
    bind( toClass( "<%= repository.service_by_name(repository.imit.session_context_service).ejb.qualified_service_name %>" ) ).to( toClass( "<%= repository.service_by_name(repository.imit.session_context_service).ejb.qualified_service_implementation_name %>" ) ).in( javax.inject.Singleton.class );
  }

  protected void bindReplicant()
  {
    multiBind( toClass( "<%= repository.imit.qualified_session_manager_name %>" ),
               toClass( "replicant.server.EntityMessageEndpoint.class" ),
               toClass( "replicant.server.transport.ReplicantSessionManager" ),
               toClass( "<%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>" ) );
  }

  @SuppressWarnings( "unchecked" )
  @javax.annotation.Nonnull
  private static <T> Class<T> toClass( @javax.annotation.Nonnull final String classname )
  {
    try
    {
      return (Class<T>) Class.forName( classname );
    }
    catch ( final ClassNotFoundException cnfe )
    {
      throw new RuntimeException( cnfe );
    }
  }
}
