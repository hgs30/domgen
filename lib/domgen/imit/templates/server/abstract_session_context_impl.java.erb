/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_abstract_session_context_impl_name) %>;

/**
 * Subclass this class using the following conventions.
 *
 * <pre>
 * \@ApplicationScoped
 * \@Transactional
 * \@Typed( <%= repository.service_by_name(repository.imit.session_context_service).ejb.service_name %>.class )
 * class <%= repository.service_by_name(repository.imit.session_context_service).ejb.service_implementation_name %>
 *   extends <%= repository.imit.abstract_session_context_impl_name %>
 * {
 * ...
 * }
 * </pre>
 */
@SuppressWarnings( "SqlNoDataSourceInspection" )
abstract class <%= repository.imit.abstract_session_context_impl_name %>
  extends replicant.server.ee.AbstractSessionContextImpl
  implements <%= repository.service_by_name(repository.imit.session_context_service).ejb.qualified_service_name %>
{
  @javax.persistence.PersistenceContext( unitName = <%= repository.jpa.qualified_unit_descriptor_name %>.NAME )
  private javax.persistence.EntityManager _entityManager;

  @javax.annotation.Nonnull
  protected java.lang.SecurityException createNotPermittedException( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final String action )
  {
    return new java.lang.SecurityException( "User does not have required permission to perform action: " + action );
  }

  @java.lang.Override
  public void preSubscribe( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChannelAddress address, @javax.annotation.Nullable final Object filter )
  {
<%
  first = true
-%>
<% repository.imit.graphs.select{|graph|graph.secure? && graph.external_visibility?}.each do |graph| -%>
    <%= first ? '' : 'else ' %>if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.channelId() )
    {
<% if graph.filter_parameter -%>
      final var <%= Reality::Naming.camelize("#{graph.name}Filter") %> = (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter;
      assert null != <%= Reality::Naming.camelize("#{graph.name}Filter") %>;
<% end -%>
      ensureSubscribeTo<%= graph.name %>Permitted( session, address<% if graph.filter_parameter -%>, <%= Reality::Naming.camelize("#{graph.name}Filter") %><% end -%> );
    }
<%
    first = false
  end
-%>
  }

  @java.lang.SuppressWarnings( "unchecked" )
  @javax.annotation.Nullable
  @java.lang.Override
  public replicant.server.EntityMessage filterEntityMessage( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChannelAddress address, @javax.annotation.Nonnull final replicant.server.EntityMessage message )
  {
<% if repository.imit.graphs.select{|graph| graph.filtered?}.empty? -%>
    throw new java.lang.IllegalStateException( "filterEntityMessage called for unfiltered channel " + address );
<% else -%>
    <% first = true -%>
<% repository.imit.graphs.select{|graph| graph.filtered?}.each do |graph| -%>
<% if first -%>   <% end -%> if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.channelId() )
    {
<%
  first = false
  extra_interest_filter = ''
  graph.routing_keys.each do |routing_key|
    var_name = Reality::Naming.camelize("#{graph.name}_#{routing_key.name}")
    extra_interest_filter << ", #{var_name}"
    param_type = routing_key.target_attribute.jpa.non_primitive_java_type
    param_type = "java.util.List<#{param_type}>" if routing_key.multivalued?
-%>
      final var <%= var_name %> = (<%= param_type %>) message.getRoutingKeys().get( <%= repository.imit.qualified_server_router_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY );
<% end -%>
<% if graph.instance_root? -%>
      final var rootId = address.rootId();
      assert null != rootId;
<% end -%>
<% if graph.filter_parameter? -%>
      final var filter = (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) session.getSubscriptionEntry( address ).getFilter();
      assert null != filter;
<% end -%>
      return filterMessageOfInterestIn<%= graph.name %>Graph( message, session<% if graph.instance_root? %>, rootId<% end %><% if graph.filter_parameter? %>, filter<% end %><%= extra_interest_filter %> );
    }
    else<% end %>
    {
      throw new java.lang.IllegalStateException( "filterEntityMessage called for unfiltered channel " + address );
    }
<% end -%>
  }

<% repository.imit.graphs.select{|graph|graph.secure? && graph.external_visibility?}.each do |graph| -%>
  protected void ensureSubscribeTo<%= graph.name %>Permitted(@javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChannelAddress address<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %> )
  {
    if ( !isSubscribeTo<%= graph.name %>Permitted( session, address<% if graph.filter_parameter -%>, filter<% end -%> ) )
    {
      throw createNotPermittedException( session, "SubscribeTo<%= graph.name %>" );
    }
  }

  protected abstract boolean isSubscribeTo<%= graph.name %>Permitted(@javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChannelAddress address<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %> );

<% end -%>
<% repository.imit.graphs.select{|graph|graph.type_graph? && graph.bulk_load?}.each do |graph| -%>
  @java.lang.Override
  public void bulkCollectFor<%= graph.name %>( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %>, final boolean explicitSubscribe )
  {
    final var address = new replicant.server.ChannelAddress( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> );
    preBulkCollectFor<%= graph.name %>(<% if graph.filter_parameter -%> filter <% end %>);
    recordSubscription( session, changeSet, address, <%= graph.filter_parameter ? 'filter' : 'null' %>, explicitSubscribe );
    performBulkCollectFor<%= graph.name %>( session, changeSet<% if graph.filter_parameter -%>, filter<% end %>, explicitSubscribe );
  }

  @SuppressWarnings( "unused" )
  protected void preBulkCollectFor<%= graph.name %>(<% if graph.filter_parameter -%> <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter <% end %>)
  {
  }

  protected abstract void performBulkCollectFor<%= graph.name %>( @javax.annotation.Nonnull replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %>, boolean explicitSubscribe );

<% end -%>
<% repository.imit.graphs.select{|graph|graph.instance_root? && graph.bulk_load?}.each do |graph| -%>
  @java.lang.Override
  public void bulkCollectFor<%= graph.name %>( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> addresses<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %>, final boolean explicitSubscribe )
  {
    performBulkCollectFor<%= graph.name %>( session, changeSet, addresses<% if graph.filter_parameter -%>, filter<% end %>, explicitSubscribe );
  }
<% unless graph.instance_root? && graph.bulk_load? %>

  protected abstract void performBulkCollectFor<%= graph.name %>( @javax.annotation.Nonnull replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull java.util.List<replicant.server.ChannelAddress> addresses<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %>, boolean explicitSubscribe );
<% end -%>

<% end -%>
<% repository.imit.graphs.select{|graph|graph.instance_root? && graph.bulk_load? && graph.filtered? && graph.filter_parameter? && !graph.filter_parameter.immutable?}.each do |graph| -%>
  @java.lang.Override
  public void bulkCollectFor<%= graph.name %>FilterChange( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> addresses, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> originalFilter, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
  {
    performBulkCollectFor<%= graph.name %>FilterChange( session, changeSet, addresses, originalFilter, filter );
  }
<% unless graph.instance_root? && graph.bulk_load? %>

  protected abstract void performBulkCollectFor<%= graph.name %>FilterChange( @javax.annotation.Nonnull replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull java.util.List<replicant.server.ChannelAddress> addresses, <%= nullability_annotation(graph.filter_parameter.nullable?) %> <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> originalFilter, <%= nullability_annotation(graph.filter_parameter.nullable?) %> <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter );
<% end -%>

<% end -%>
<%
repository.imit.graphs.select{|graph| graph.filtered?}.each do |graph|
  extra_params = ''
  extra_args = ''
  mutable_routing_keys = false
  graph.routing_keys.each do |routing_key|
    nullable = !graph.instance_root?||!(routing_key.imit_attribute.attribute.entity.qualified_name==graph.instance_root)
    mutable_routing_keys ||= !routing_key.referenced_attribute.immutable?
    type = Domgen::Java.non_primitive_java_type(routing_key.referenced_attribute, :ee, :boundary)
    type = "java.util.List<#{type}>" if routing_key.multivalued?
    extra_params += ", #{nullability_annotation(nullable)} final #{type} #{Reality::Naming.camelize(routing_key.name)}"
    extra_args += ", #{Reality::Naming.camelize(routing_key.name)}"
  end
  -%>
<% if mutable_routing_keys -%>
  @javax.annotation.Nonnull
  protected abstract replicant.server.transport.FilterResult test<%= graph.name %>Interesting( @javax.annotation.Nonnull final replicant.server.EntityMessage message, @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session <% if graph.instance_root? %>, @javax.annotation.Nonnull final <% entity = repository.entity_by_name(graph.instance_root) %> <%= entity.primary_key.jpa.non_primitive_java_type %> <%= Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}") %> <% end %><% if graph.filter_parameter? %>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter <% end %><%= extra_params %> );

  @javax.annotation.Nullable
  private replicant.server.EntityMessage filterMessageOfInterestIn<%= graph.name %>Graph( @javax.annotation.Nonnull final replicant.server.EntityMessage message, @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session <% if graph.instance_root? %>, @javax.annotation.Nonnull final <%entity = repository.entity_by_name(graph.instance_root) %> <%= entity.primary_key.jpa.non_primitive_java_type %> <%= Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}") %> <% end %><% if graph.filter_parameter? %>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter <% end %><%= extra_params %> )
  {
    final var result = test<%= graph.name %>Interesting( message, session<% if graph.instance_root? %>, <% entity = repository.entity_by_name(graph.instance_root) %> <%= Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}") %> <% end %><%if graph.filter_parameter? %>, filter <% end %><%= extra_args %> );
    if ( replicant.server.transport.FilterResult.KEEP == result )
    {
      return message;
    }
    else if ( replicant.server.transport.FilterResult.DELETE == result )
    {
      return message.toDelete();
    }
    else
    {
      return null;
    }
  }
<% else -%>
  protected abstract boolean is<%= graph.name %>Interesting( @javax.annotation.Nonnull final replicant.server.EntityMessage message, @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session <% if graph.instance_root? %>, @javax.annotation.Nonnull final <% entity = repository.entity_by_name(graph.instance_root) %> <%= entity.primary_key.jpa.non_primitive_java_type %> <%= Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}") %> <% end %><% if graph.filter_parameter? %>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter <% end %><%= extra_params %> );

  @javax.annotation.Nullable
  private replicant.server.EntityMessage filterMessageOfInterestIn<%= graph.name %>Graph( @javax.annotation.Nonnull final replicant.server.EntityMessage message, @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session <% if graph.instance_root? %>, @javax.annotation.Nonnull final <%entity = repository.entity_by_name(graph.instance_root) %> <%= entity.primary_key.jpa.non_primitive_java_type %> <%= Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}") %> <% end %><% if graph.filter_parameter? %>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter <% end %><%= extra_params %> )
  {
    if ( is<%= graph.name %>Interesting( message, session<% if graph.instance_root? %>, <% entity = repository.entity_by_name(graph.instance_root) %> <%= Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}") %> <% end %><%if graph.filter_parameter? %>, filter <% end %><%= extra_args %> ) )
    {
      return message;
    }
    else
    {
      return null;
    }
  }
<% end -%>
<% end -%>
<% repository.imit.graphs.each do |graph| -%>
<%
  if graph.instance_root? && graph.filtered? && !graph.bulk_load?
graph.reachable_entities.collect { |n| repository.entity_by_name(n) }.select { |entity| entity.imit? && entity.concrete? }.each do |entity|
  outgoing_links = entity.referencing_attributes.select { |a| a.arez? && a.inverse.arez.traversable? && a.jpa? && a.inverse.jpa.java_traversable? && a.inverse.imit.replication_edges.include?(graph.name) }
  outgoing_links.each do |a|
    if a.inverse.multiplicity == :many
 -%>

  @java.lang.Override
  public java.util.List<<%= a.entity.jpa.qualified_name %>> get<%= a.inverse.attribute.qualified_name.gsub('.', '') %>In<%= graph.name %>Graph( @javax.annotation.Nonnull final <%= a.referenced_entity.jpa.qualified_name %> entity<% if graph.filter_parameter? %>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %> )
  {
    return entity.get<%= Reality::Naming.pascal_case(Reality::Naming.pluralize(a.inverse.name)) %>();
  }
<%
    elsif a.inverse.multiplicity == :one || a.inverse.multiplicity == :zero_or_one
 -%>

  @java.lang.Override
  public <%= a.entity.jpa.qualified_name %> get<%= a.inverse.attribute.qualified_name.gsub('.', '') %>In<%= graph.name %>Graph( @javax.annotation.Nonnull final <%= a.referenced_entity.jpa.qualified_name %> entity<% if graph.filter_parameter? %>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %> )
  {
    return entity.get<%= Reality::Naming.pascal_case(a.inverse.name) %>();
  }
<%
    end
  end
end
end
-%>
<% end -%>

  @javax.annotation.Nonnull
  @java.lang.Override
  protected javax.persistence.EntityManager em()
  {
    return _entityManager;
  }

<% repository.imit.graphs.select{|graph|graph.instance_root? && graph.bulk_load?}.each do |graph|
  instance_root = repository.entity_by_name(graph.instance_root)
  pk_long_name = instance_root.primary_key.qualified_name.gsub('.','')

  graph.included_entities.collect{|name| repository.entity_by_name(name)}.each do |entity|
-%>

  /**
   * Implement with code that probably looks something like:
   * <br/>
   * <code>
   * <pre>
   \@Language( "TSQL" )
    final var sql =
      generateTempIdTable( addresses ) +
      "SELECT ... AS <%= instance_root.name %><%= instance_root.primary_key.name %>, E.* FROM <%= entity.sql.qualified_table_name.gsub('[','').gsub(']','') %> E ... JOIN @Ids Inputs ON Inputs.Id = ...";
      addUpdateFor<%= entity.qualified_name.gsub('.','') %>In<%= graph.name %>Graph( changeSet, "<%= instance_root.name %><%= instance_root.primary_key.name %>", sql );

   * </pre>
   * </code>
   */
  protected abstract void bulkCollectFor<%= entity.qualified_name.gsub('.','') %>In<%= graph.name %>Graph( @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> addresses, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %> )
    throws java.sql.SQLException;

<% if graph.filter_parameter && !graph.filter_parameter.immutable? && entity != instance_root -%>

  protected abstract void bulkCollectFor<%= entity.qualified_name.gsub('.','') %>In<%= graph.name %>GraphFilterChange( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> addresses, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> originalFilter, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
    throws java.sql.SQLException;
<% end -%>

  @SuppressWarnings( "unused" )
  protected void addUpdateFor<%= entity.qualified_name.gsub('.','') %>In<%= graph.name %>Graph( @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull final java.lang.String <%= Reality::Naming.camelize(pk_long_name) %>ColumnName, @javax.annotation.Nonnull final java.sql.PreparedStatement statement )
    throws java.sql.SQLException
  {
    <%= repository.imit.qualified_jpa_encoder_name %>.encode<%= entity.qualified_name.gsub('.','') %>( changeSet, <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, statement, <%= Reality::Naming.camelize(pk_long_name) %>ColumnName );
  }

  @SuppressWarnings( { "resource", "unused", "SqlSourceToSinkFlow" } )
  protected void addUpdateFor<%= entity.qualified_name.gsub('.','') %>In<%= graph.name %>Graph( @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull final java.lang.String <%= Reality::Naming.camelize(pk_long_name) %>ColumnName, @org.intellij.lang.annotations.Language( "TSQL" ) @javax.annotation.Nonnull final java.lang.String sql )
    throws java.sql.SQLException
  {
    try ( var statement = connection().createStatement() )
    {
      <%= repository.imit.qualified_jpa_encoder_name %>.encode<%= entity.qualified_name.gsub('.','') %>( changeSet, <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, statement.executeQuery( sql ), <%= Reality::Naming.camelize(pk_long_name) %>ColumnName );
    }
  }
<% end -%>

  @SuppressWarnings( "unused" )
  protected void preBulkCollectFor<%= graph.name %>( @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> addresses<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %> )
  {
  }

  protected void performBulkCollectFor<%= graph.name %>( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> input<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %>, final boolean explicitSubscribe )
  {
    final var addresses = new java.util.ArrayList<>( input );
    try
    {
      // This block deals with non-existent root entities by sending a DELETE channel action
      // backback, which is the behavior expected by the client and implemented in the non-bulk scenario
      addDeleteForInstanceRootIn<%= graph.name %>Graph( changeSet, addresses );
      // Abort if it turns out all addresses were deleted
      if ( addresses.isEmpty() )
      {
        return;
      }
      preBulkCollectFor<%= graph.name %>( addresses<% if graph.filter_parameter -%>, filter<% end %> );
      recordSubscriptions( session, changeSet, addresses, <%= graph.filter_parameter? ? 'filter' : 'null' -%>, explicitSubscribe );

<% graph.included_entities.collect{|name| repository.entity_by_name(name)}.each do |entity| -%>
      bulkCollectFor<%= entity.qualified_name.gsub('.','') %>In<%= graph.name %>Graph( addresses, changeSet<% if graph.filter_parameter -%>, filter<% end %> );
<% end -%>
    }
    catch ( final java.sql.SQLException sqle )
    {
      throw new java.lang.IllegalStateException( sqle );
    }
  }
<% if graph.filter_parameter && !graph.filter_parameter.immutable? -%>

  @SuppressWarnings( "unused" )
  protected void preBulkCollectFor<%= graph.name %>FilterChange( @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> addresses, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
  {
  }

  protected void performBulkCollectFor<%= graph.name %>FilterChange( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> input, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> originalFilter, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
  {
    final var addresses = new java.util.ArrayList<>( input );
    try
    {
      // This block deals with non-existent root entities by sending a DELETE channel action
      // back which is the behavior expected by the client and implemented in the non-bulk scenario
      addDeleteForInstanceRootIn<%= graph.name %>Graph( changeSet, addresses );
      // Abort if it turns out all addresses were deleted
      if ( addresses.isEmpty() )
      {
        return;
      }

      preBulkCollectFor<%= graph.name %>FilterChange( addresses<% if graph.filter_parameter -%>, filter<% end %> );

      // No change on root entity as all we have to do is update the filter
      for ( final var address : addresses )
      {
        changeSet.mergeAction( address, replicant.server.ChannelAction.Action.UPDATE, filter );
        session.getSubscriptionEntry( address ).setFilter( filter );
      }

<%
  graph.filtered_outward_auto_graph_links.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
-%>
      bulkPropagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( session, addresses, changeSet, filter );
<% end -%>
<% graph.included_entities.select{|name| graph.instance_root != name}.collect{|name| repository.entity_by_name(name)}.each do |entity| -%>
      bulkCollectFor<%= entity.qualified_name.gsub('.','') %>In<%= graph.name %>GraphFilterChange( session, addresses, changeSet, originalFilter, filter );
<% end -%>
    }
    catch ( final java.sql.SQLException sqle )
    {
      throw new java.lang.IllegalStateException( sqle );
    }
  }
<% end -%>

  @SuppressWarnings( { "resource", "unused", "SqlSourceToSinkFlow" } )
  protected void addDeleteForInstanceRootIn<%= graph.name %>Graph( @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> addresses )
    throws java.sql.SQLException
  {
    @org.intellij.lang.annotations.Language( "TSQL" )
    final var sql =
      generateTempIdTable( addresses ) +
      "SELECT Inputs.Id\n" +
      "FROM @Ids Inputs\n" +
      "LEFT JOIN <%= repository.entity_by_name(graph.instance_root).sql.qualified_table_name %> E ON E.<%= repository.entity_by_name(graph.instance_root).primary_key.sql.quoted_column_name %> = Inputs.Id\n" +
      "WHERE E.Id IS NULL\n";
    try ( var statement = connection().createStatement( ) )
    {
      try ( var resultSet = statement.executeQuery( sql ) )
      {
        while ( resultSet.next() )
        {
          final var id = resultSet.getInt( "Id" );
          final var address = new replicant.server.ChannelAddress( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, id );
          changeSet.mergeAction( address, replicant.server.ChannelAction.Action.DELETE, null );
          final var removed = addresses.remove( address );
          assert removed;
        }
      }
    }
  }
<% end -%>
<% if repository.imit.graphs.any?{|graph| graph.filter_parameter? && !graph.filter_parameter.immutable? && !graph.outward_graph_links.empty? && graph.outward_graph_links.any?{|graph_link| graph_link.auto? && repository.imit.graph_by_name(graph_link.target_graph).filtered?} } -%>

<% repository.imit.graphs.select{|graph| graph.filter_parameter? && !graph.filter_parameter.immutable? }.each do |graph|
  root_type = graph.instance_root? ? Domgen::Java.java_type(repository.entity_by_name(graph.instance_root).primary_key, :ee, :default) : nil
  processed = []
  graph.filtered_outward_auto_graph_links.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     source_graph_instance_root = repository.entity_by_name(graph.instance_root)
     parameters_equiv = graph.filter_parameter? && target_graph.filter_parameter.equiv?(graph.filter_parameter)
-%>

  protected abstract void bulkPropagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.List<replicant.server.ChannelAddress> addresses, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet, @javax.annotation.Nonnull final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default)%> <%= Reality::Naming.camelize("#{graph.name}Filter") %> )
    throws java.sql.SQLException;

  @SuppressWarnings( "unused" )
  protected void propagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final replicant.server.ChangeSet changeSet<% if graph.filtered? %>, @javax.annotation.Nonnull final <%= Domgen::Java.java_type(target_graph.filter_parameter, :ee, :default)%> <%= Reality::Naming.camelize("#{target_graph.name}Filter") %><% end %>, @org.intellij.lang.annotations.Language( "TSQL" ) @javax.annotation.Nonnull final java.lang.String sql, @javax.annotation.Nonnull final java.lang.String <%= Reality::Naming.camelize("#{target_graph.name}IdColumnName") %> )
    throws java.sql.SQLException
  {
    final var targets = getChannelAddressesForTargetGraph( sql, <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(target_graph.name) %>, <%= Reality::Naming.camelize("#{target_graph.name}IdColumnName") %> );
    for ( final var entry : this.<<%= Domgen::Java.java_type(target_graph.filter_parameter, :ee, :default)%>>partitionGraphsByFilter( session, targets ).entrySet() )
    {
      bulkCollectFor<%= target_graph.name %>FilterChange( session, changeSet, entry.getValue(), entry.getKey(), <%= Reality::Naming.camelize("#{target_graph.name}Filter") %> );
    }
  }
<% if parameters_equiv -%>

  @javax.annotation.Nonnull
  @java.lang.SuppressWarnings( "unused" )
  @java.lang.Override
  public <%= Domgen::Java.java_type(target_graph.filter_parameter, :ee, :default) %> deriveFilterToPropagateFrom<%= graph.name %>To<%= target_graph.name %>( <% if graph.instance_root? -%>@javax.annotation.Nonnull final <%= source_graph_instance_root.jpa.qualified_name %> sourceGraphInstanceRoot<% end %><% if graph.filtered? %><%= graph.instance_root? ? ', ' : '' %>@javax.annotation.Nonnull final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> <%= Reality::Naming.camelize("#{graph.name}Filter") %><% end %> )<%= parameters_equiv ? '' : ';' %>
  {
    return <%= Reality::Naming.camelize("#{graph.name}Filter") %>;
  }
<% end -%>
<% end -%>
<% end -%>

  @java.lang.SuppressWarnings( "unchecked" )
  @javax.annotation.Nonnull
  private <T> java.util.Map<T, java.util.List<replicant.server.ChannelAddress>> partitionGraphsByFilter( @javax.annotation.Nonnull final replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.Set<replicant.server.ChannelAddress> targets )
  {
    final var map = new java.util.HashMap<T, java.util.List<replicant.server.ChannelAddress>>();
    for ( final var target : targets )
    {
      final var filter = (T) session.getSubscriptionEntry( target ).getFilter();
      map.computeIfAbsent( filter, e -> new java.util.ArrayList<>() ).add( target );
    }
    return map;
  }

  @SuppressWarnings( { "SameParameterValue", "resource" } )
  @javax.annotation.Nonnull
  private java.util.Set<replicant.server.ChannelAddress> getChannelAddressesForTargetGraph( @org.intellij.lang.annotations.Language( "TSQL" ) @javax.annotation.Nonnull final String sql, final int targetGraph, @javax.annotation.Nonnull final String targetGraphColumnName )
    throws java.sql.SQLException
  {
    final var targets = new java.util.HashSet<replicant.server.ChannelAddress>();
    try ( var statement = connection().createStatement() )
    {
      try ( var resultSet = statement.executeQuery( sql ) )
      {
        while ( resultSet.next() )
        {
          targets.add( new replicant.server.ChannelAddress( targetGraph, resultSet.getInt( targetGraphColumnName ) ) );
        }
      }
    }
    return targets;
  }
<% end -%>
}
