/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_session_manager_name) %>;
<%
# Collect all graph links that we automatically follow
auto_follow_graph_links =
  repository.
    imit.
    graphs.
    select{|g| g.instance_root? }.
    collect{|g| g.inward_graph_links.select{|graph_link| graph_link.auto?} }.
    flatten.
    select do |graph_link|
      target_graph = repository.imit.graph_by_name(graph_link.target_graph)
      target_graph.filter_parameter? && target_graph.instance_root? && repository.imit.graph_by_name(graph_link.source_graph).instance_root?
    end

# Collect list of graphs that we propagate filters from
graphs_that_propagate_filters =
  repository.
    imit.
    graphs.
    select{|graph| graph.unfiltered? || (graph.filter_parameter? && !graph.filter_parameter.immutable?) }.
    select{|graph| graph.outward_graph_links.any?{|graph_link| graph_link.auto? && repository.imit.graph_by_name(graph_link.target_graph).filter_parameter?} }
-%>

@java.lang.SuppressWarnings( "unchecked" )
@javax.enterprise.context.ApplicationScoped
@javax.transaction.Transactional
@javax.enterprise.inject.Typed( { org.realityforge.replicant.server.EntityMessageEndpoint.class, org.realityforge.replicant.server.transport.ReplicantSessionManager.class, <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>.class } )
public class <%= repository.imit.session_manager_name %>
  extends org.realityforge.replicant.server.transport.ReplicantSessionManagerImpl
  implements <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>
{
  @javax.annotation.Nonnull
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= repository.imit.session_manager_name %>.class.getName() );
  @javax.annotation.Nonnull
  private static final java.util.logging.Level SUBSCRIPTION_LOG_LEVEL = java.util.logging.Level.FINE;
  @javax.persistence.PersistenceContext( unitName = <%= repository.jpa.qualified_unit_descriptor_name %>.NAME )
  private javax.persistence.EntityManager _entityManager;
  @javax.inject.Inject
  private <%= repository.imit.qualified_graph_encoder_name %> _encoder;
<%
entities =
  repository.imit.graphs.select{|g|!g.bulk_load? && g.instance_root?}.collect{|g|repository.entity_by_name(g.instance_root)} +
  auto_follow_graph_links.collect{|graph_link|repository.entity_by_name(repository.imit.graph_by_name(graph_link.target_graph).instance_root)} +
  graphs_that_propagate_filters.select{|g| g.instance_root?}.collect{|graph|repository.entity_by_name(graph.instance_root)}

entities.uniq.sort_by{|e|e.qualified_name}.each do |entity| -%>
  @javax.inject.Inject
  private <%= entity.dao.jpa.qualified_dao_service_name %> _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository;
<% end -%>
  @javax.inject.Inject
  private <%= repository.service_by_name(repository.imit.session_context_service).ejb.qualified_service_name %> _context;
  @javax.annotation.Resource
  private javax.transaction.TransactionSynchronizationRegistry _registry;
  @javax.inject.Inject
  private org.realityforge.replicant.server.transport.ReplicantMessageBroker _replicantMessageBroker;

  @java.lang.Override
  public void subscribe( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address, @javax.annotation.Nullable final Object filter )
    throws java.lang.InterruptedException
  {
    _context.preSubscribe( session, address, filter );
    super.subscribe( session, address, filter );
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected org.realityforge.replicant.server.transport.ReplicantMessageBroker getReplicantMessageBroker()
  {
    return _replicantMessageBroker;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected javax.transaction.TransactionSynchronizationRegistry getRegistry()
  {
    return _registry;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  public org.realityforge.replicant.server.transport.SystemMetaData getSystemMetaData()
  {
    return <%= repository.imit.qualified_system_metadata_name %>.getSystemMetaData();
  }
<% filtered_instance_graphs = repository.imit.graphs.select{|graph| graph.filtered?} -%>
<% unless filtered_instance_graphs.empty? -%>

  @javax.annotation.Nullable
  protected org.realityforge.replicant.server.EntityMessage filterEntityMessage( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address, @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessage message )
  {
<% first = true -%>
<% repository.imit.graphs.select{|graph| graph.filtered?}.each do |graph| -%>
<% if first -%>   <% end -%> if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.getChannelId() )
    {
<%
  first = false
  extra_interest_filter = ''
  graph.routing_keys.each do |routing_key|
    var_name = Reality::Naming.camelize("#{graph.name}_#{routing_key.name}")
    extra_interest_filter << ", #{var_name}"
    param_type = routing_key.target_attribute.jpa.non_primitive_java_type
    param_type = "java.util.List<#{param_type}>" if routing_key.multivalued?
-%>
      final var <%= var_name %> = (<%= param_type %>) message.getRoutingKeys().get( <%= repository.imit.qualified_server_router_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY );
<% end -%>
<% if graph.instance_root? -%>
      final var subChannelId = address.getSubChannelId();
      assert null != subChannelId;
<% end -%>
<% if graph.filter_parameter? -%>
      final var filter = (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) session.getSubscriptionEntry( address ).getFilter();
      assert null != filter;
<% end -%>
      return _context.filterMessageOfInterestIn<%= graph.name %>Graph( message, session<% if graph.instance_root? %>, subChannelId<% end %><% if graph.filter_parameter? %>, filter<% end %><%= extra_interest_filter %> );
    }
    else<% end %>
    {
      return super.filterEntityMessage( session, address, message );
    }
  }
<% end -%>
<% if repository.imit.graphs.any?{|graph| graph.filter_parameter? && !graph.filter_parameter.immutable? && !graph.outward_graph_links.empty? && graph.outward_graph_links.any?{|graph_link| graph_link.auto? && repository.imit.graph_by_name(graph_link.target_graph).filtered?} } -%>

  @java.lang.Override
  public void propagateSubscriptionFilterUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session,
                                                 @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address,
                                                 @javax.annotation.Nullable final java.lang.Object filter,
                                                 @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet )
  {
<% first = true -%>
<% repository.imit.graphs.select{|graph| graph.unfiltered? || (graph.filter_parameter && !graph.filter_parameter.immutable?) }.each do |source_graph|
    processed = []
    source_graph.outward_graph_links.select{|graph_link| graph_link.auto?}.each do |graph_link|
      target_graph = repository.imit.graph_by_name(graph_link.target_graph)
      next unless target_graph.filter_parameter
      key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
      next if processed.include?(key)
      processed << key
-%>
    <%= first ? '' : 'else ' %>if( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(source_graph.name) %> == address.getChannelId() )
    {
<% if source_graph.instance_root? -%>
      final var sourceGraphSubChannelId = address.getSubChannelId();
      assert null != sourceGraphSubChannelId;
<% end -%>
<% if source_graph.filter_parameter -%>
      final var sourceGraphFilter = (<%= Domgen::Java.java_type(source_graph.filter_parameter, :ee, :default) %>) filter;
      assert null != sourceGraphFilter;
<% end -%>
      propagateFilterFrom<%= source_graph.name %>To<%= target_graph.name %>( session, <% if source_graph.instance_root? %>sourceGraphSubChannelId, <% end %><% if source_graph.filtered? %>sourceGraphFilter, <% end %>changeSet );
    }
<% first = false -%>
<% end -%>
<% end -%>
  }
<% repository.imit.graphs.select{|graph| graph.unfiltered? || (graph.filter_parameter && !graph.filter_parameter.immutable?) }.each do |source_graph|
  root_type = source_graph.instance_root? ? Domgen::Java.java_type(repository.entity_by_name(source_graph.instance_root).primary_key, :ee, :default) : nil
  processed = []
  source_graph.outward_graph_links.select{|graph_link| graph_link.auto?}.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filter_parameter
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
     next if processed.include?(key)
     processed << key
     target_graph_instance_root = repository.entity_by_name(target_graph.instance_root)
     source_graph_instance_root = repository.entity_by_name(source_graph.instance_root)
-%>

  private void propagateFilterFrom<%= source_graph.name %>To<%= target_graph.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final <%= root_type %> <%= Reality::Naming.camelize("#{source_graph.name}Id") %><% if source_graph.filter_parameter %>, @javax.annotation.Nonnull final <%= Domgen::Java.java_type(source_graph.filter_parameter, :ee, :default) %> <%= Reality::Naming.camelize("#{source_graph.name}Filter") %><% end %>, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet )
  {
<% if source_graph.instance_root? -%>
    final var <%= Reality::Naming.camelize("#{source_graph.name}InstanceRoot") %> = _<%= Reality::Naming.camelize("#{source_graph_instance_root.data_module.name}#{source_graph_instance_root.name}") %>Repository.getBy<%= source_graph_instance_root.primary_key.name %>( <%= Reality::Naming.camelize("#{source_graph.name}Id") %> );
<% end -%>
    final var <%= Reality::Naming.camelize("#{target_graph.name}Filter") %> = _context.deriveFilterToPropagateFrom<%= source_graph.name %>To<%= target_graph.name %>( <% if source_graph.instance_root? -%><%= Reality::Naming.camelize("#{source_graph.name}InstanceRoot") %><% end -%><% if source_graph.filter_parameter %>, <%= Reality::Naming.camelize("#{source_graph.name}Filter") %><% end %> );
    // Propagate the filter from <%= source_graph.name %> to downstream graph <%= target_graph.name %>
    for ( final var <%= Reality::Naming.camelize("#{target_graph.name}InstanceRootId") %> : _context.getLinksToUpdateFor<%= source_graph.name %>To<%= target_graph.name %>( <% if source_graph.instance_root? -%><%= Reality::Naming.camelize("#{source_graph.name}InstanceRoot") %><% end -%><% if source_graph.filter_parameter %>, <%= Reality::Naming.camelize("#{source_graph.name}Filter") %><% end -%> ) )
    {
      subscribe( session, new org.realityforge.replicant.server.ChannelAddress( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(target_graph.name) %>, <%= Reality::Naming.camelize("#{target_graph.name}InstanceRootId") %> ), true, <%= Reality::Naming.camelize("#{target_graph.name}Filter") %>, changeSet );
    }
  }
<% end -%>
<% end -%>
<% end -%>
<% repository.imit.graphs.select{|graph|!graph.bulk_load?}.each do |graph| -%>
<% if graph.filter_parameter? && !graph.filter_parameter.immutable? -%>

  private void collectDataFor<%= graph.name %>SubscriptionUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> originalFilter, final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
  {
<%
    if graph.instance_root?
      entity = repository.entity_by_name(graph.instance_root)
-%>
    final var id = address.getSubChannelId();
    assert null != id;
    final var entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.getBy<%= entity.primary_key.name %>( id );
<% end %>
    _context.collectForFilterChange<%= graph.name %>( session, changeSet, address, <%= graph.instance_root? ? 'entity, ' : '' %>originalFilter, filter );
  }
<% end -%>

<% unless graph.instance_root? -%>
  @java.lang.SuppressWarnings( { "SqlNoDataSourceInspection", "resource" } )
<% end -%>
  @javax.annotation.Nonnull
  private org.realityforge.replicant.server.transport.SubscribeResult collectDataFor<%= graph.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet<% if graph.filter_parameter? -%>, final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %>)
  {
<%
    if graph.instance_root?
      entity = repository.entity_by_name(graph.instance_root)
-%>
    final var id = address.getSubChannelId();
    assert null != id;
    final var entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.findBy<%= entity.primary_key.name %>( id );
    if ( null == entity )
    {
      return new org.realityforge.replicant.server.transport.SubscribeResult( true, null );
    }
    final var messages = new org.realityforge.replicant.server.EntityMessageSet();
    _encoder.encode<%= graph.name %>( messages, entity<%= graph.filter_parameter? ? ', filter' : '' %> );
    changeSet.merge( address, messages );
<%
    elsif !graph.external_data_load?
-%>
    // Add to a list so that when routing we limit the number of new entities that are loaded during routing
    final var objects = new java.util.LinkedList<>();
<% graph.type_roots.each do |type_root_name|
  type = repository.entity_by_name(type_root_name)
-%>
    try ( var statement = connection().createStatement() )
    {
        <%= repository.imit.qualified_jpa_encoder_name %>.encode<%= type.qualified_name.gsub('.','') %>( changeSet, <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, statement.executeQuery( "SELECT * FROM <%= type.sql.qualified_table_name %><%= type.transaction_time? ? 'WHERE DeletedAt IS NULL' : '' %>" ), <%= graph.filter_parameter? ? 'filter' : 'null' -%> );
    }
    catch ( final java.sql.SQLException sqle )
    {
      throw new java.lang.IllegalStateException( "Failed loading <%= type.name %> in <%= graph.name %>", sqle );
    }
<% end -%>
    final var messages = new org.realityforge.replicant.server.EntityMessageSet();
    _encoder.encodeObjects( messages, objects );
    changeSet.merge( address, messages );
<%
    else
-%>
    _context.collect<%= graph.name %>( address, changeSet<%= graph.filter_parameter.nil? ? '' : ', filter' %> );
<%
    end
-%>
<% if graph.cacheable? -%>
    final var cacheKey = java.lang.String.valueOf( java.lang.System.currentTimeMillis() );
<% end -%>
    return new org.realityforge.replicant.server.transport.SubscribeResult( false, <%= graph.cacheable? ? 'cacheKey' : 'null' %> );
  }
<% end -%>

  @java.lang.Override
  @javax.annotation.Nonnull
  protected org.realityforge.replicant.server.transport.SubscribeResult collectDataForSubscribe( @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, @javax.annotation.Nullable final Object filter )
  {
<% repository.imit.graphs.select{|graph|!graph.bulk_load?}.each do |graph| -%>
    if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.getChannelId() )
    {
      if ( LOG.isLoggable( SUBSCRIPTION_LOG_LEVEL ) )
      {
        LOG.log( SUBSCRIPTION_LOG_LEVEL, "collectDataForSubscribe(ChangeSet=" + System.identityHashCode( changeSet ) + ",Channel=" + <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_NAME + <% if graph.instance_root? -%>",Id=" + address.getSubChannelId() + <% end -%>")" );
      }
<% if graph.filter_parameter -%>
      assert null != filter;
<% end -%>
      return collectDataFor<%= graph.name %>( address, changeSet<% if graph.filter_parameter -%>, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter<% end %> );
    }
<% end -%>
    return super.collectDataForSubscribe( address, changeSet, filter );
  }
<% bulk_subscribe_graphs = repository.imit.graphs.select{|graph| graph.bulk_load?} -%>
<% unless bulk_subscribe_graphs.empty? -%>

  @java.lang.Override
  protected void bulkCollectDataForSubscribe( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.List<org.realityforge.replicant.server.ChannelAddress> addresses, @javax.annotation.Nullable final Object filter, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, final boolean isExplicitSubscribe )
  {
    final var address = addresses.get( 0 );
<% bulk_subscribe_graphs.each do |graph| -%>
    <%= bulk_subscribe_graphs[0] == graph ? '' : 'else ' %>if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.getChannelId() )
    {
      if ( LOG.isLoggable( SUBSCRIPTION_LOG_LEVEL ) )
      {
        LOG.log( SUBSCRIPTION_LOG_LEVEL, "bulkCollectDataForSubscribe(SessionId=" + session.getId() +",ChangeSet=" + System.identityHashCode( changeSet ) + ",Channel=" + <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_NAME + <% if graph.instance_root? -%>",Ids=" + addresses.stream().map( org.realityforge.replicant.server.ChannelAddress::getSubChannelId ).toList() + <% end -%>", isExplicitSubscribe=" + isExplicitSubscribe + ")" );
      }
<% if graph.filter_parameter -%>
      assert null != filter;
<% end -%>
      _context.bulkCollectFor<%= graph.name %>( session, changeSet<% if graph.instance_root? %>, addresses<% end %><% if graph.filter_parameter -%>, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter<% end %>, true );
    }
<% end -%>
    else
    {
      super.bulkCollectDataForSubscribe( session, addresses, filter, changeSet, isExplicitSubscribe );
    }
  }
<% end -%>
<% bulk_subscription_update_graphs = repository.imit.graphs.select{|graph| graph.bulk_load? && graph.filtered? && graph.filter_parameter? && !graph.filter_parameter.immutable?} -%>
<% unless bulk_subscription_update_graphs.empty? -%>

  @java.lang.Override
  protected void bulkCollectDataForSubscriptionUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.List<org.realityforge.replicant.server.ChannelAddress> addresses, @javax.annotation.Nullable final Object originalFilter, @javax.annotation.Nullable final Object filter, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, final boolean isExplicitSubscribe )
  {
<% bulk_subscription_update_graphs.each do |graph| -%>
    <%= bulk_subscription_update_graphs[0] == graph ? '' : 'else ' %>if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == addresses.get( 0 ).getChannelId() )
    {
      if ( LOG.isLoggable( SUBSCRIPTION_LOG_LEVEL ) )
      {
        LOG.log( SUBSCRIPTION_LOG_LEVEL, "bulkCollectDataForSubscriptionUpdate(SessionId=" + session.getId() +",ChangeSet=" + System.identityHashCode( changeSet ) + ",Channel=" + <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_NAME + <% if graph.instance_root? -%>",Ids=" + addresses.stream().map( org.realityforge.replicant.server.ChannelAddress::getSubChannelId ).toList() + <% end -%>", isExplicitSubscribe=" + isExplicitSubscribe + ")" );
      }
      assert null != filter;
      assert null != originalFilter;
      _context.bulkCollectFor<%= graph.name %>FilterChange( session, changeSet<% if graph.instance_root? %>, addresses<% end %>, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) originalFilter, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter );
<%
  processed = []
  graph.outward_graph_links.select{|graph_link| graph_link.auto?}.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
     next if processed.include?(key)
     processed << key
-%>
      for ( final var address : addresses )
      {
<% if graph.instance_root? -%>
        final var subChannelId = address.getSubChannelId();
        assert null != subChannelId;
<% end -%>
        propagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( session, <% if graph.instance_root? %>subChannelId, <% end %>(<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter, org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionChanges() );
      }
<% end -%>
    }
<% end -%>
    else
    {
      super.bulkCollectDataForSubscriptionUpdate( session, addresses, originalFilter, filter, changeSet, isExplicitSubscribe );
    }
  }
<% end -%>
<% updateable_graphs = repository.imit.graphs.select{|graph| graph.filter_parameter && !graph.filter_parameter.immutable? && !graph.bulk_load?} -%>
<% if !updateable_graphs.empty? -%>

  @java.lang.Override
  protected void collectDataForSubscriptionUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session,
                                                   @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress address,
                                                   @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet,
                                                   @javax.annotation.Nullable final Object originalFilter,
                                                   @javax.annotation.Nullable final Object filter )
  {
<% updateable_graphs.each do |graph| -%>
    if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> == address.getChannelId() )
    {
      if ( LOG.isLoggable( SUBSCRIPTION_LOG_LEVEL ) )
      {
        LOG.log( SUBSCRIPTION_LOG_LEVEL, "collectDataForSubscriptionUpdate(ChangeSet=" + System.identityHashCode( changeSet ) + ",Channel=" + <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_NAME + <% if graph.instance_root? -%>",Id=" + address.getSubChannelId() + <% end -%>")" );
      }
      collectDataFor<%= graph.name %>SubscriptionUpdate( session, address, changeSet, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) originalFilter, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter );
      return;
    }
<% end -%>
    super.collectDataForSubscriptionUpdate( session, address, changeSet, originalFilter, filter );
  }
<% end -%>
<% if !auto_follow_graph_links.empty? -%>

  @java.lang.Override
  protected boolean shouldFollowLink( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.SubscriptionEntry sourceEntry, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelAddress target )
  {
<% if auto_follow_graph_links.any? -%>
    final var source = sourceEntry.getAddress();
    final var sourceChannelId = source.getChannelId();
    final var targetChannelId = target.getChannelId();
<% end -%>
<% auto_follow_graph_links.each do |graph_link|
                                    target_graph = repository.imit.graph_by_name(graph_link.target_graph)
         source_graph = repository.imit.graph_by_name(graph_link.source_graph)
         target_graph_instance_root = repository.entity_by_name(target_graph.instance_root)
 -%>
    if ( <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(source_graph.name) %> == sourceChannelId && <%= repository.imit.qualified_subscription_constants_name %>.<%= Reality::Naming.uppercase_constantize(target_graph.name) %> == targetChannelId )
    {
<% if target_graph.instance_root? -%>
      final var targetSubChannelId = target.getSubChannelId();
      assert null != targetSubChannelId;
<% end -%>
<% if source_graph.filter_parameter? -%>
      final var sourceGraphFilter = (<%= Domgen::Java.java_type(source_graph.filter_parameter, :ee, :default) %>) sourceEntry.getFilter();
      assert null != sourceGraphFilter;
<% end -%>
      final var targetGraphInstanceRoot = _<%= Reality::Naming.camelize("#{target_graph_instance_root.data_module.name}#{target_graph_instance_root.name}") %>Repository.getBy<%= target_graph_instance_root.primary_key.name %>( targetSubChannelId );
      return _context.shouldFollowLinkFrom<%= graph_link.source_graph %>To<%= target_graph.name %>( targetGraphInstanceRoot<% if source_graph.filter_parameter? -%>, sourceGraphFilter<% end -%> );
    }
<% end -%>
    return super.shouldFollowLink( sourceEntry, target );
  }
<% end -%>
  @javax.annotation.Nonnull
  private java.sql.Connection connection()
  {
    return _entityManager.unwrap( java.sql.Connection.class );
  }
}
