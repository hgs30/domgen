/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.ejb.qualified_cdi_types_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
public final class <%= repository.ejb.cdi_types_test_name %>
{<%
  repository.data_modules.select{|d|d.ejb?}.each do |data_module|
    data_module.services.select{|s|s.ejb? && s.ejb.generate_base_test?}.each do |service|
-%>

  @org.testng.annotations.Test
  public void ensure<%= data_module.name %><%= service.name %>ImplementationIsCdiType()
    throws java.lang.Exception
  {
    final var clazz = java.lang.Class.forName( "<%= service.ejb.qualified_service_implementation_name %>" );
    org.testng.Assert.assertFalse( java.lang.reflect.Modifier.isPublic( clazz.getModifiers() ), "Class <%= service.ejb.qualified_service_implementation_name %> is public but should be package access" );
    assertNoFinalMethodsForCDI( clazz );
  }
<%
    end
  end
-%>

  private void assertNoFinalMethodsForCDI( @javax.annotation.Nonnull final java.lang.Class<?> clazz )
  {
    for ( final var method : clazz.getDeclaredMethods() )
    {
      if ( java.lang.Object.class != method.getDeclaringClass() )
      {
        final var message = "Method " + method.getName() + " on " + clazz.getName() + " is final and thus not compatible with CDI";
        org.testng.Assert.assertFalse( java.lang.reflect.Modifier.isFinal( method.getModifiers() ), message );
      }
    }
    final var parent = clazz.getSuperclass();
    if ( null != parent )
    {
      assertNoFinalMethodsForCDI( parent );
    }
  }
}
