/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.ejb.qualified_boundary_service_implementation_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@javax.enterprise.context.ApplicationScoped
@javax.transaction.Transactional( javax.transaction.Transactional.TxType.REQUIRES_NEW )
@javax.enterprise.inject.Typed( <%= service.ejb.qualified_boundary_service_name %>.class )
<% if service.ejb.boundary_interceptors.size > 0 -%>
@javax.interceptor.Interceptors( { <%= service.ejb.boundary_interceptors.collect{|i| "#{i}.class"}.join(', ') %> } )
<% end-%>
<% service.ejb.boundary_annotations.each do |annotation| -%>
@<%= annotation %>
<% end-%>
class <%= service.ejb.boundary_service_implementation_name %>
<%= service.ejb.boundary_extends ? "  extends #{service.ejb.boundary_extends}\n" : ''-%>
  implements <%= service.ejb.qualified_boundary_service_name %>
{
<% service.methods.select{|method | method.ejb.generate_boundary?}.collect {|method|method.parameters.select{|parameter|parameter.reference? && (!parameter.referenced_entity.dao.jpa.module_local? || service.data_module.name.to_s == parameter.referenced_entity.data_module.name.to_s)}.collect{|parameter|parameter.referenced_entity}}.flatten.sort{|a,b| a.name.to_s <=> b.name.to_s }.uniq.each do |entity| -%>
  @javax.inject.Inject
  private <%= entity.dao.jpa.qualified_dao_service_name %> _<%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>;
<% end -%>
<%
  created_persistent_context = false
  service.methods.select{|method | method.ejb.generate_boundary?}.collect {|method|method.parameters.select{|parameter|parameter.reference? && parameter.referenced_entity.dao.jpa.module_local? && service.data_module.name.to_s != parameter.referenced_entity.data_module.name.to_s}.collect{|parameter|parameter.referenced_entity}}.flatten.each do |entity|
    unless created_persistent_context
      created_persistent_context = true
  -%>
  @javax.persistence.PersistenceContext( unitName = <%= service.data_module.repository.jpa.qualified_unit_descriptor_name %>.NAME )
  private javax.persistence.EntityManager em;
<% end -%>
<% end -%>
  @javax.inject.Inject
  private <%= service.ejb.qualified_service_name %> _service;
<% service.methods.select{|method | method.ejb.generate_boundary?}.each do |method|
%>
<% if method.ejb.boundary_interceptors.size > 0 -%>
  @javax.interceptor.Interceptors( { <%= method.ejb.boundary_interceptors.collect{|i| "#{i}.class"}.join(', ') %> } )
<% end-%>
<% method.ejb.boundary_annotations.each do |annotation| -%>
  @<%= annotation %>
<% end-%>
  @java.lang.Override
  <%= annotated_type(method.return_value, :ejb, :boundary, :public => true) %> <%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p| "#{annotated_type(p, :ejb, :boundary, :final => true)} #{p.name}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.base_exceptions.collect{|e| e.ee.qualified_name}.join(', ')}"
%><%
   return_prefix = ''
   transform = ''
   if method.return_value.return_type != :void
     if method.return_value.ejb.java_type == method.return_value.ejb.java_type(:boundary)
       return_prefix = 'return '
     else
       return_prefix = "final var value = "
       if !method.return_value.collection?
         transform = "return #{modality_default_to_transport('value', method.return_value, :ejb)};"
       else
         return_prefix = "final var result = "
         transform = method.return_value.nullable? ? "if ( null == result ) { return null; }\n" : ''
         transform = transform + <<-JAVA
        final var $result = new java.util.#{method.return_value.collection_type == :set ? 'HashSet' : 'ArrayList' }<#{method.return_value.ejb.java_component_type(:boundary)}>();
        for( final var k: result )
        {
          $result.add( #{
         method.return_value.reference? ? "k.get#{method.return_value.referenced_entity.primary_key.name}()" :
           method.return_value.enumeration.numeric_values? ? 'k.ordinal()' : 'k.name()'
         } );
        }
        return $result;
JAVA
       end
     end
   end
   transform = transform.size > 0 ? "    #{transform}\n" : transform
%>
  {
<% method.parameters.select{|parameter|parameter.reference? && parameter.referenced_entity.dao.jpa.module_local? && service.data_module.name.to_s != parameter.referenced_entity.data_module.name.to_s}.each do |parameter|
  pk_query_name = "#{parameter.nullable? ? 'FindBy' : 'GetBy'}#{parameter.referenced_entity.primary_key.name}"
  query = parameter.referenced_entity.dao.queries.select{|q| q.jpa? && q.name.to_s == pk_query_name}[0]
-%>
    final var $<%= Reality::Naming.camelize(parameter.name) %>Query = em.createNamedQuery( <%= "#{query.entity.jpa.qualified_name}." %><%= Reality::Naming.uppercase_constantize(query.name) %>, <%= query.entity.jpa.qualified_name %>.class );
    $<%= Reality::Naming.camelize(parameter.name) %>Query.setParameter( <%= "\"#{parameter.referenced_entity.primary_key.name}\"" %>, <%= parameter.name %> );
<% if parameter.nullable? -%>
    $<%= Reality::Naming.camelize(parameter.name) %>Query.setMaxResults( 1 );
    final var $<%= Reality::Naming.camelize(parameter.name) %>ResultList = $<%= Reality::Naming.camelize(parameter.name) %>Query.getResultList();
    final var $<%= Reality::Naming.camelize(parameter.name) %> = $<%= Reality::Naming.camelize(parameter.name) %>ResultList.isEmpty() ? null : $<%= Reality::Naming.camelize(parameter.name) %>ResultList.get( 0 );
<% else -%>
    final var $<%= Reality::Naming.camelize(parameter.name) %> = $<%= Reality::Naming.camelize(parameter.name) %>Query.getSingleResult();
<% end -%>
<% end -%>
<% method.parameters.select{|parameter| parameter.reference? && parameter.collection?}.each do |parameter| -%>
    final var $<%= parameter.name %> = new java.util.<%=  parameter.collection_type == :set ? 'HashSet' : 'ArrayList' %><<%= parameter.ejb.java_component_type(:default) %>>();
    for( final var id: <%= parameter.name %> )
    {
      $<%= parameter.name %>.add( _<%= Reality::Naming.camelize(parameter.referenced_entity.dao.jpa.dao_service_name) %>.getBy<%= parameter.referenced_entity.primary_key.name %>( id ) );
    }
<% end -%>
    <%= return_prefix  %>_service.<%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|parameter| parameter.reference? && parameter.referenced_entity.dao.jpa.module_local? && service.data_module.name.to_s != parameter.referenced_entity.data_module.name.to_s ? "$#{Reality::Naming.camelize(parameter.name)}" : "#{modality_boundary_to_default(parameter.name, parameter, :ejb)}" }.join(', ') %>);
<%= transform -%>
  }
<% end -%>
}
