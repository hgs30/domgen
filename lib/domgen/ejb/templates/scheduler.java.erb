/* DO NOT EDIT: File is auto-generated */
package <%= to_package(method.ejb.qualified_scheduler_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@javax.ejb.TransactionAttribute( javax.ejb.TransactionAttributeType.REQUIRES_NEW )
@javax.ejb.Startup
@javax.ejb.Singleton( name = "<%= method.qualified_name.gsub('#','.') %>Scheduler" )
@javax.ejb.ConcurrencyManagement( javax.ejb.ConcurrencyManagementType.<%= method.ejb.schedule.concurrency_management_type.to_s.upcase %> )
// Note that this class MUST remain public to cater for an older version of GlassFish that
// can not load the class if the class is package access
public class <%= method.ejb.scheduler_name %>
{
  @javax.annotation.Nonnull
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= method.ejb.scheduler_name %>.class.getName() );
  @javax.annotation.Resource
  private javax.ejb.TimerService _timerService;
  @javax.inject.Inject
  private <%= method.service.ejb.generate_boundary? ? method.service.ejb.qualified_boundary_service_name : method.service.ejb.qualified_service_name %> _service;

  @javax.ejb.Schedule( info = "<%= method.ejb.schedule.info %>", year = "<%= method.ejb.schedule.year %>", month = "<%= method.ejb.schedule.month %>", dayOfMonth = "<%= method.ejb.schedule.day_of_month %>", dayOfWeek = "<%= method.ejb.schedule.day_of_week %>", hour = "<%= method.ejb.schedule.hour %>", minute = "<%= method.ejb.schedule.minute %>", second = "<%= method.ejb.schedule.second %>", timezone = "<%= method.ejb.schedule.timezone %>", persistent = <%= method.ejb.schedule.persistent? %> )
  void trigger()
  {
    /*
     * Schedule another timer immediately so that a call to the method has no way of rolling back the transaction and thus removing the timer.
     * See http://it-result.me/reliable-ejb-timers-in-jee6/
     */
    _timerService.createSingleActionTimer( 0, new javax.ejb.TimerConfig( "<%= method.ejb.schedule.info %>.Worker", false ) );
  }

  @javax.ejb.Timeout
  void processTimeout()
    throws Exception
  {
    try
    {
      _service.<%= Reality::Naming.camelize(method.name) %>();
    }
    catch ( final java.lang.Throwable t )
    {
      final var sw = new java.io.StringWriter();
      t.printStackTrace( new java.io.PrintWriter( sw, true ) );
      LOG.log( java.util.logging.Level.SEVERE, "Error generated processing timed <%= method.ejb.schedule.info %> invocation.\n" + sw );
    }
  }
}
