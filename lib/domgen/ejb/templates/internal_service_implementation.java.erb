/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.ejb.qualified_internal_service_implementation_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@javax.enterprise.context.ApplicationScoped
@javax.transaction.Transactional
@javax.enterprise.inject.Typed( <%= service.ejb.qualified_internal_service_name %>.class )
class <%= service.ejb.internal_service_implementation_name %>
  implements <%= service.ejb.qualified_internal_service_name %>
{
  @javax.inject.Inject
  private <%= service.ejb.qualified_service_name %> _service;
<% service.methods.select{|method | method.ejb.internal_service?}.each do |method|
%>
  @java.lang.Override
  <%= annotated_type(method.return_value, :ejb, :default, :public => true) %> <%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p| "#{annotated_type(p, :ejb, :default, :final => true)} #{Reality::Naming.camelize(p.name)}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.base_exceptions.collect{|e| e.ee.qualified_name}.join(', ')}"
%>
  {
    <%= method.return_value.return_type != :void ? 'return ' : '' %>_service.<%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|parameter| Reality::Naming.camelize(parameter.name) }.join(', ') %>);
  }
<% end -%>
}
