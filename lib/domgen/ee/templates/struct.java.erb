/* DO NOT EDIT: File is auto-generated */
package <%= to_package(struct.ee.qualified_name) %>;

@SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "NotNullFieldNotInitialized" } )
<%= jackson_class_annotations(struct) if struct.jackson? -%>
<% unless struct.ee.module_local? %>public <% end %>class <%= struct.ee.name %>
  implements java.io.Serializable
{
  @java.io.Serial
  private static final long serialVersionUID = 1;

<% struct.fields.each do |field| -%>
<%= '  ' + jackson_field_annotation(field) if field.jackson? -%>
  <%= annotated_type(field, :ee, :boundary, :private => true) %> <%= Reality::Naming.camelize(field.name) %>;
<% end -%>

<% if struct.fields.size != 0 %>
  /**
   * This constructor is present for deserialization mechanisms and should not be called directly.
   *
   * @deprecated This constructor is present for deserialization mechanisms and should not be called directly.
   */
  @java.lang.Deprecated
  public <%= struct.name %>()
  {
  }

<% end %>
<% if struct.data_module.jpa? && struct.fields.any?{|field|field.enumeration?} -%>
  // This constructor exists in case the JPA subsystem needs to map struct in result as enumerations are not mapped correctly
  <% unless struct.ee.module_local? %>public <% end %><%= struct.name %>( <%= struct.fields.collect {|field| "#{annotated_type(field, :ee, (field.enumeration? ? :transport : :boundary), :final => true)} #{Reality::Naming.camelize(field.name)}" }.join(', ') %> )
  {
    this( <%= struct.fields.collect {|field|
  name = Reality::Naming.camelize(field.name)
    if field.enumeration?
      field.enumeration.numeric_values? ?
       ((field.nullable? ? "null == #{name} ? null : " : "") + "#{field.enumeration.ee.qualified_name}.values()[ #{name} ]")
      : ((field.nullable? ? "null == #{name} ? null : " : "") + "#{field.enumeration.ee.qualified_name}.valueOf( #{name} )")
  else
    name
  end }.join(', ') %> );
  }

<% end -%>
  <% unless struct.ee.module_local? %>public <% end %><%= struct.name %>( <%= struct.fields.collect {|field| "#{annotated_type(field, :ee, :boundary, :final => true)} #{Reality::Naming.camelize(field.name)}" }.join(', ') %> )
  {
<% struct.fields.each do |field|
     null_protection = field.nullable? ? "#{Reality::Naming.camelize(field.name)} == null ? null : " :''
     if :sequence == field.collection_type
%>    this.<%= Reality::Naming.camelize(field.name) %> = <%= null_protection %>java.util.Collections.unmodifiableList( new java.util.ArrayList<>( java.util.Objects.requireNonNull( <%= Reality::Naming.camelize(field.name) %> ) ) );
<%     elsif :set == field.collection_type
%>    this.<%= Reality::Naming.camelize(field.name) %> = <%= null_protection %>java.util.Collections.unmodifiableSet( new java.util.HashSet<>( java.util.Objects.requireNonNull( <%= Reality::Naming.camelize(field.name) %> ) ) );
  <%     else
%>    this.<%= Reality::Naming.camelize(field.name) %> = <%= field.nullable? || field.ee.primitive? ? '' : 'java.util.Objects.requireNonNull( ' %><%= Reality::Naming.camelize(field.name) %><%= field.nullable? || field.ee.primitive? ? '' : ' )' %>;
<%   end
   end
%>  }
<% struct.fields.each do |field|
%>
  <%= annotated_type(field, :ee, :boundary, :public => !struct.ee.module_local?, :final => true) %> <%= getter_prefix(field) %><%= field.name %>()
  {
    return <%= Reality::Naming.camelize(field.name) %>;
  }
<% end -%>

  @java.lang.SuppressWarnings( { "RedundantIfStatement", "RedundantSuppression" } )
  public boolean equals( final Object o )
  {
    if ( this == o )
    {
      return true;
    }
    else if ( o == null || getClass() != o.getClass() )
    {
      return false;
    }
<% if struct.fields.empty? %>
    else
    {
      return true;
    }
<% else -%>
    else
    {
      final var that = (<%= struct.ee.name %>) o;
<%
    need_else = false
    struct.fields.select{|f|!f.collection?}.each do |field|
-%>
      <%= need_else ? 'else ' : '' %>if ( <%= field.ee.primitive?(:boundary) ? "#{Reality::Naming.camelize(field.name)} != that.#{Reality::Naming.camelize(field.name)}" : "!java.util.Objects.equals( #{Reality::Naming.camelize(field.name)}, that.#{Reality::Naming.camelize(field.name)} )" %> )
      {
        return false;
      }
<%
      need_else = true
    end
-%>
<% struct.fields.select{|f|f.collection?}.each do |field| -%>
<% if field.nullable? -%>
      <%= need_else ? 'else ' : '' %>if ( (null ==  <%= Reality::Naming.camelize(field.name) %> && null !=  that.<%= Reality::Naming.camelize(field.name) %>) || (null !=  <%= Reality::Naming.camelize(field.name) %> && null ==  that.<%= Reality::Naming.camelize(field.name) %>) )
      {
        return false;
      }
      else if ( null != <%= Reality::Naming.camelize(field.name) %> )
<% end -%>
      {
        if ( <%= Reality::Naming.camelize(field.name) %>.size() != that.<%= Reality::Naming.camelize(field.name) %>.size() )
        {
          return false;
        }
        for ( final var v : <%= Reality::Naming.camelize(field.name) %> )
        {
          if ( !that.<%= Reality::Naming.camelize(field.name) %>.contains( v ) )
          {
            return false;
          }
        }
      }
<%
      need_else = true
    end
-%>
      return true;
    }
<% end -%>
  }

  @java.lang.Override
  public int hashCode()
  {
    var $result = 0;
<% struct.fields.each do |field| -%>
    $result = 31 * $result + (<%= field.ee.primitive?(:boundary) ? (field.boolean? ? "#{Reality::Naming.camelize(field.name)} ? 1 : 0": field.real? ? "Float.floatToIntBits(#{Reality::Naming.camelize(field.name)})" : field.long? ? "(int)(#{Reality::Naming.camelize(field.name)})" : Reality::Naming.camelize(field.name)) : "#{field.nullable? ? "null == #{Reality::Naming.camelize(field.name)} ? 0 : " : ''}#{Reality::Naming.camelize(field.name)}.hashCode()" %>);
<% end -%>
    return $result;
  }
}
